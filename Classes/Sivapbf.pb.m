// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Sivapbf.pb.h"

@implementation SivapbfRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [SivapbfRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface Error ()
@property int32_t errCode;
@property (retain) NSString* errText;
@end

@implementation Error

- (BOOL) hasErrCode {
  return !!hasErrCode_;
}
- (void) setHasErrCode:(BOOL) value {
  hasErrCode_ = !!value;
}
@synthesize errCode;
- (BOOL) hasErrText {
  return !!hasErrText_;
}
- (void) setHasErrText:(BOOL) value {
  hasErrText_ = !!value;
}
@synthesize errText;
- (void) dealloc {
  self.errText = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.errCode = 0;
    self.errText = @"";
  }
  return self;
}
static Error* defaultErrorInstance = nil;
+ (void) initialize {
  if (self == [Error class]) {
    defaultErrorInstance = [[Error alloc] init];
  }
}
+ (Error*) defaultInstance {
  return defaultErrorInstance;
}
- (Error*) defaultInstance {
  return defaultErrorInstance;
}
- (BOOL) isInitialized {
  if (!self.hasErrCode) {
    return NO;
  }
  if (!self.hasErrText) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasErrCode) {
    [output writeInt32:1 value:self.errCode];
  }
  if (self.hasErrText) {
    [output writeString:2 value:self.errText];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasErrCode) {
    size += computeInt32Size(1, self.errCode);
  }
  if (self.hasErrText) {
    size += computeStringSize(2, self.errText);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Error*) parseFromData:(NSData*) data {
  return (Error*)[[[Error builder] mergeFromData:data] build];
}
+ (Error*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Error*)[[[Error builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Error*) parseFromInputStream:(NSInputStream*) input {
  return (Error*)[[[Error builder] mergeFromInputStream:input] build];
}
+ (Error*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Error*)[[[Error builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Error*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Error*)[[[Error builder] mergeFromCodedInputStream:input] build];
}
+ (Error*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Error*)[[[Error builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Error_Builder*) builder {
  return [[[Error_Builder alloc] init] autorelease];
}
+ (Error_Builder*) builderWithPrototype:(Error*) prototype {
  return [[Error builder] mergeFrom:prototype];
}
- (Error_Builder*) builder {
  return [Error builder];
}
@end

@interface Error_Builder()
@property (retain) Error* result;
@end

@implementation Error_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Error alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Error_Builder*) clear {
  self.result = [[[Error alloc] init] autorelease];
  return self;
}
- (Error_Builder*) clone {
  return [Error builderWithPrototype:result];
}
- (Error*) defaultInstance {
  return [Error defaultInstance];
}
- (Error*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Error*) buildPartial {
  Error* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Error_Builder*) mergeFrom:(Error*) other {
  if (other == [Error defaultInstance]) {
    return self;
  }
  if (other.hasErrCode) {
    [self setErrCode:other.errCode];
  }
  if (other.hasErrText) {
    [self setErrText:other.errText];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Error_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Error_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setErrCode:[input readInt32]];
        break;
      }
      case 18: {
        [self setErrText:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasErrCode {
  return result.hasErrCode;
}
- (int32_t) errCode {
  return result.errCode;
}
- (Error_Builder*) setErrCode:(int32_t) value {
  result.hasErrCode = YES;
  result.errCode = value;
  return self;
}
- (Error_Builder*) clearErrCode {
  result.hasErrCode = NO;
  result.errCode = 0;
  return self;
}
- (BOOL) hasErrText {
  return result.hasErrText;
}
- (NSString*) errText {
  return result.errText;
}
- (Error_Builder*) setErrText:(NSString*) value {
  result.hasErrText = YES;
  result.errText = value;
  return self;
}
- (Error_Builder*) clearErrText {
  result.hasErrText = NO;
  result.errText = @"";
  return self;
}
@end

@interface A_Basket_ProcessId_And_Date ()
@property (retain) NSString* basketId;
@property (retain) NSString* lastBuildDate;
@property (retain) NSMutableArray* mutablePIdList;
@end

@implementation A_Basket_ProcessId_And_Date

- (BOOL) hasBasketId {
  return !!hasBasketId_;
}
- (void) setHasBasketId:(BOOL) value {
  hasBasketId_ = !!value;
}
@synthesize basketId;
- (BOOL) hasLastBuildDate {
  return !!hasLastBuildDate_;
}
- (void) setHasLastBuildDate:(BOOL) value {
  hasLastBuildDate_ = !!value;
}
@synthesize lastBuildDate;
@synthesize mutablePIdList;
- (void) dealloc {
  self.basketId = nil;
  self.lastBuildDate = nil;
  self.mutablePIdList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.basketId = @"";
    self.lastBuildDate = @"";
  }
  return self;
}
static A_Basket_ProcessId_And_Date* defaultA_Basket_ProcessId_And_DateInstance = nil;
+ (void) initialize {
  if (self == [A_Basket_ProcessId_And_Date class]) {
    defaultA_Basket_ProcessId_And_DateInstance = [[A_Basket_ProcessId_And_Date alloc] init];
  }
}
+ (A_Basket_ProcessId_And_Date*) defaultInstance {
  return defaultA_Basket_ProcessId_And_DateInstance;
}
- (A_Basket_ProcessId_And_Date*) defaultInstance {
  return defaultA_Basket_ProcessId_And_DateInstance;
}
- (NSArray*) pIdList {
  return mutablePIdList;
}
- (NSString*) pIdAtIndex:(int32_t) index {
  id value = [mutablePIdList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasBasketId) {
    return NO;
  }
  if (!self.hasLastBuildDate) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBasketId) {
    [output writeString:1 value:self.basketId];
  }
  if (self.hasLastBuildDate) {
    [output writeString:2 value:self.lastBuildDate];
  }
  for (NSString* element in self.mutablePIdList) {
    [output writeString:3 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasBasketId) {
    size += computeStringSize(1, self.basketId);
  }
  if (self.hasLastBuildDate) {
    size += computeStringSize(2, self.lastBuildDate);
  }
  {
    int32_t dataSize = 0;
    for (NSString* element in self.mutablePIdList) {
      dataSize += computeStringSizeNoTag(element);
    }
    size += dataSize;
    size += 1 * self.mutablePIdList.count;
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (A_Basket_ProcessId_And_Date*) parseFromData:(NSData*) data {
  return (A_Basket_ProcessId_And_Date*)[[[A_Basket_ProcessId_And_Date builder] mergeFromData:data] build];
}
+ (A_Basket_ProcessId_And_Date*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (A_Basket_ProcessId_And_Date*)[[[A_Basket_ProcessId_And_Date builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (A_Basket_ProcessId_And_Date*) parseFromInputStream:(NSInputStream*) input {
  return (A_Basket_ProcessId_And_Date*)[[[A_Basket_ProcessId_And_Date builder] mergeFromInputStream:input] build];
}
+ (A_Basket_ProcessId_And_Date*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (A_Basket_ProcessId_And_Date*)[[[A_Basket_ProcessId_And_Date builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (A_Basket_ProcessId_And_Date*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (A_Basket_ProcessId_And_Date*)[[[A_Basket_ProcessId_And_Date builder] mergeFromCodedInputStream:input] build];
}
+ (A_Basket_ProcessId_And_Date*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (A_Basket_ProcessId_And_Date*)[[[A_Basket_ProcessId_And_Date builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (A_Basket_ProcessId_And_Date_Builder*) builder {
  return [[[A_Basket_ProcessId_And_Date_Builder alloc] init] autorelease];
}
+ (A_Basket_ProcessId_And_Date_Builder*) builderWithPrototype:(A_Basket_ProcessId_And_Date*) prototype {
  return [[A_Basket_ProcessId_And_Date builder] mergeFrom:prototype];
}
- (A_Basket_ProcessId_And_Date_Builder*) builder {
  return [A_Basket_ProcessId_And_Date builder];
}
@end

@interface A_Basket_ProcessId_And_Date_Builder()
@property (retain) A_Basket_ProcessId_And_Date* result;
@end

@implementation A_Basket_ProcessId_And_Date_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[A_Basket_ProcessId_And_Date alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (A_Basket_ProcessId_And_Date_Builder*) clear {
  self.result = [[[A_Basket_ProcessId_And_Date alloc] init] autorelease];
  return self;
}
- (A_Basket_ProcessId_And_Date_Builder*) clone {
  return [A_Basket_ProcessId_And_Date builderWithPrototype:result];
}
- (A_Basket_ProcessId_And_Date*) defaultInstance {
  return [A_Basket_ProcessId_And_Date defaultInstance];
}
- (A_Basket_ProcessId_And_Date*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (A_Basket_ProcessId_And_Date*) buildPartial {
  A_Basket_ProcessId_And_Date* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (A_Basket_ProcessId_And_Date_Builder*) mergeFrom:(A_Basket_ProcessId_And_Date*) other {
  if (other == [A_Basket_ProcessId_And_Date defaultInstance]) {
    return self;
  }
  if (other.hasBasketId) {
    [self setBasketId:other.basketId];
  }
  if (other.hasLastBuildDate) {
    [self setLastBuildDate:other.lastBuildDate];
  }
  if (other.mutablePIdList.count > 0) {
    if (result.mutablePIdList == nil) {
      result.mutablePIdList = [NSMutableArray array];
    }
    [result.mutablePIdList addObjectsFromArray:other.mutablePIdList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (A_Basket_ProcessId_And_Date_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (A_Basket_ProcessId_And_Date_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setBasketId:[input readString]];
        break;
      }
      case 18: {
        [self setLastBuildDate:[input readString]];
        break;
      }
      case 26: {
        [self addPId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasBasketId {
  return result.hasBasketId;
}
- (NSString*) basketId {
  return result.basketId;
}
- (A_Basket_ProcessId_And_Date_Builder*) setBasketId:(NSString*) value {
  result.hasBasketId = YES;
  result.basketId = value;
  return self;
}
- (A_Basket_ProcessId_And_Date_Builder*) clearBasketId {
  result.hasBasketId = NO;
  result.basketId = @"";
  return self;
}
- (BOOL) hasLastBuildDate {
  return result.hasLastBuildDate;
}
- (NSString*) lastBuildDate {
  return result.lastBuildDate;
}
- (A_Basket_ProcessId_And_Date_Builder*) setLastBuildDate:(NSString*) value {
  result.hasLastBuildDate = YES;
  result.lastBuildDate = value;
  return self;
}
- (A_Basket_ProcessId_And_Date_Builder*) clearLastBuildDate {
  result.hasLastBuildDate = NO;
  result.lastBuildDate = @"";
  return self;
}
- (NSArray*) pIdList {
  if (result.mutablePIdList == nil) {
    return [NSArray array];
  }
  return result.mutablePIdList;
}
- (NSString*) pIdAtIndex:(int32_t) index {
  return [result pIdAtIndex:index];
}
- (A_Basket_ProcessId_And_Date_Builder*) replacePIdAtIndex:(int32_t) index with:(NSString*) value {
  [result.mutablePIdList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (A_Basket_ProcessId_And_Date_Builder*) addPId:(NSString*) value {
  if (result.mutablePIdList == nil) {
    result.mutablePIdList = [NSMutableArray array];
  }
  [result.mutablePIdList addObject:value];
  return self;
}
- (A_Basket_ProcessId_And_Date_Builder*) addAllPId:(NSArray*) values {
  if (result.mutablePIdList == nil) {
    result.mutablePIdList = [NSMutableArray array];
  }
  [result.mutablePIdList addObjectsFromArray:values];
  return self;
}
- (A_Basket_ProcessId_And_Date_Builder*) clearPIdList {
  result.mutablePIdList = nil;
  return self;
}
@end

@interface All_Baskets_ProcessId_And_Date ()
@property (retain) NSMutableArray* mutableABasketProcessIdAndDateList;
@end

@implementation All_Baskets_ProcessId_And_Date

@synthesize mutableABasketProcessIdAndDateList;
- (void) dealloc {
  self.mutableABasketProcessIdAndDateList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static All_Baskets_ProcessId_And_Date* defaultAll_Baskets_ProcessId_And_DateInstance = nil;
+ (void) initialize {
  if (self == [All_Baskets_ProcessId_And_Date class]) {
    defaultAll_Baskets_ProcessId_And_DateInstance = [[All_Baskets_ProcessId_And_Date alloc] init];
  }
}
+ (All_Baskets_ProcessId_And_Date*) defaultInstance {
  return defaultAll_Baskets_ProcessId_And_DateInstance;
}
- (All_Baskets_ProcessId_And_Date*) defaultInstance {
  return defaultAll_Baskets_ProcessId_And_DateInstance;
}
- (NSArray*) aBasketProcessIdAndDateList {
  return mutableABasketProcessIdAndDateList;
}
- (A_Basket_ProcessId_And_Date*) aBasketProcessIdAndDateAtIndex:(int32_t) index {
  id value = [mutableABasketProcessIdAndDateList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (A_Basket_ProcessId_And_Date* element in self.aBasketProcessIdAndDateList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (A_Basket_ProcessId_And_Date* element in self.aBasketProcessIdAndDateList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (A_Basket_ProcessId_And_Date* element in self.aBasketProcessIdAndDateList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (All_Baskets_ProcessId_And_Date*) parseFromData:(NSData*) data {
  return (All_Baskets_ProcessId_And_Date*)[[[All_Baskets_ProcessId_And_Date builder] mergeFromData:data] build];
}
+ (All_Baskets_ProcessId_And_Date*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (All_Baskets_ProcessId_And_Date*)[[[All_Baskets_ProcessId_And_Date builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (All_Baskets_ProcessId_And_Date*) parseFromInputStream:(NSInputStream*) input {
  return (All_Baskets_ProcessId_And_Date*)[[[All_Baskets_ProcessId_And_Date builder] mergeFromInputStream:input] build];
}
+ (All_Baskets_ProcessId_And_Date*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (All_Baskets_ProcessId_And_Date*)[[[All_Baskets_ProcessId_And_Date builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (All_Baskets_ProcessId_And_Date*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (All_Baskets_ProcessId_And_Date*)[[[All_Baskets_ProcessId_And_Date builder] mergeFromCodedInputStream:input] build];
}
+ (All_Baskets_ProcessId_And_Date*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (All_Baskets_ProcessId_And_Date*)[[[All_Baskets_ProcessId_And_Date builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (All_Baskets_ProcessId_And_Date_Builder*) builder {
  return [[[All_Baskets_ProcessId_And_Date_Builder alloc] init] autorelease];
}
+ (All_Baskets_ProcessId_And_Date_Builder*) builderWithPrototype:(All_Baskets_ProcessId_And_Date*) prototype {
  return [[All_Baskets_ProcessId_And_Date builder] mergeFrom:prototype];
}
- (All_Baskets_ProcessId_And_Date_Builder*) builder {
  return [All_Baskets_ProcessId_And_Date builder];
}
@end

@interface All_Baskets_ProcessId_And_Date_Builder()
@property (retain) All_Baskets_ProcessId_And_Date* result;
@end

@implementation All_Baskets_ProcessId_And_Date_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[All_Baskets_ProcessId_And_Date alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (All_Baskets_ProcessId_And_Date_Builder*) clear {
  self.result = [[[All_Baskets_ProcessId_And_Date alloc] init] autorelease];
  return self;
}
- (All_Baskets_ProcessId_And_Date_Builder*) clone {
  return [All_Baskets_ProcessId_And_Date builderWithPrototype:result];
}
- (All_Baskets_ProcessId_And_Date*) defaultInstance {
  return [All_Baskets_ProcessId_And_Date defaultInstance];
}
- (All_Baskets_ProcessId_And_Date*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (All_Baskets_ProcessId_And_Date*) buildPartial {
  All_Baskets_ProcessId_And_Date* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (All_Baskets_ProcessId_And_Date_Builder*) mergeFrom:(All_Baskets_ProcessId_And_Date*) other {
  if (other == [All_Baskets_ProcessId_And_Date defaultInstance]) {
    return self;
  }
  if (other.mutableABasketProcessIdAndDateList.count > 0) {
    if (result.mutableABasketProcessIdAndDateList == nil) {
      result.mutableABasketProcessIdAndDateList = [NSMutableArray array];
    }
    [result.mutableABasketProcessIdAndDateList addObjectsFromArray:other.mutableABasketProcessIdAndDateList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (All_Baskets_ProcessId_And_Date_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (All_Baskets_ProcessId_And_Date_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        A_Basket_ProcessId_And_Date_Builder* subBuilder = [A_Basket_ProcessId_And_Date builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addABasketProcessIdAndDate:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) aBasketProcessIdAndDateList {
  if (result.mutableABasketProcessIdAndDateList == nil) { return [NSArray array]; }
  return result.mutableABasketProcessIdAndDateList;
}
- (A_Basket_ProcessId_And_Date*) aBasketProcessIdAndDateAtIndex:(int32_t) index {
  return [result aBasketProcessIdAndDateAtIndex:index];
}
- (All_Baskets_ProcessId_And_Date_Builder*) replaceABasketProcessIdAndDateAtIndex:(int32_t) index with:(A_Basket_ProcessId_And_Date*) value {
  [result.mutableABasketProcessIdAndDateList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (All_Baskets_ProcessId_And_Date_Builder*) addAllABasketProcessIdAndDate:(NSArray*) values {
  if (result.mutableABasketProcessIdAndDateList == nil) {
    result.mutableABasketProcessIdAndDateList = [NSMutableArray array];
  }
  [result.mutableABasketProcessIdAndDateList addObjectsFromArray:values];
  return self;
}
- (All_Baskets_ProcessId_And_Date_Builder*) clearABasketProcessIdAndDateList {
  result.mutableABasketProcessIdAndDateList = nil;
  return self;
}
- (All_Baskets_ProcessId_And_Date_Builder*) addABasketProcessIdAndDate:(A_Basket_ProcessId_And_Date*) value {
  if (result.mutableABasketProcessIdAndDateList == nil) {
    result.mutableABasketProcessIdAndDateList = [NSMutableArray array];
  }
  [result.mutableABasketProcessIdAndDateList addObject:value];
  return self;
}
@end

@interface Index ()
@property (retain) NSString* indexId;
@property (retain) NSString* indexValue;
@end

@implementation Index

- (BOOL) hasIndexId {
  return !!hasIndexId_;
}
- (void) setHasIndexId:(BOOL) value {
  hasIndexId_ = !!value;
}
@synthesize indexId;
- (BOOL) hasIndexValue {
  return !!hasIndexValue_;
}
- (void) setHasIndexValue:(BOOL) value {
  hasIndexValue_ = !!value;
}
@synthesize indexValue;
- (void) dealloc {
  self.indexId = nil;
  self.indexValue = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.indexId = @"";
    self.indexValue = @"";
  }
  return self;
}
static Index* defaultIndexInstance = nil;
+ (void) initialize {
  if (self == [Index class]) {
    defaultIndexInstance = [[Index alloc] init];
  }
}
+ (Index*) defaultInstance {
  return defaultIndexInstance;
}
- (Index*) defaultInstance {
  return defaultIndexInstance;
}
- (BOOL) isInitialized {
  if (!self.hasIndexId) {
    return NO;
  }
  if (!self.hasIndexValue) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasIndexId) {
    [output writeString:1 value:self.indexId];
  }
  if (self.hasIndexValue) {
    [output writeString:2 value:self.indexValue];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasIndexId) {
    size += computeStringSize(1, self.indexId);
  }
  if (self.hasIndexValue) {
    size += computeStringSize(2, self.indexValue);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Index*) parseFromData:(NSData*) data {
  return (Index*)[[[Index builder] mergeFromData:data] build];
}
+ (Index*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Index*)[[[Index builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Index*) parseFromInputStream:(NSInputStream*) input {
  return (Index*)[[[Index builder] mergeFromInputStream:input] build];
}
+ (Index*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Index*)[[[Index builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Index*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Index*)[[[Index builder] mergeFromCodedInputStream:input] build];
}
+ (Index*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Index*)[[[Index builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Index_Builder*) builder {
  return [[[Index_Builder alloc] init] autorelease];
}
+ (Index_Builder*) builderWithPrototype:(Index*) prototype {
  return [[Index builder] mergeFrom:prototype];
}
- (Index_Builder*) builder {
  return [Index builder];
}
@end

@interface Index_Builder()
@property (retain) Index* result;
@end

@implementation Index_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Index alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Index_Builder*) clear {
  self.result = [[[Index alloc] init] autorelease];
  return self;
}
- (Index_Builder*) clone {
  return [Index builderWithPrototype:result];
}
- (Index*) defaultInstance {
  return [Index defaultInstance];
}
- (Index*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Index*) buildPartial {
  Index* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Index_Builder*) mergeFrom:(Index*) other {
  if (other == [Index defaultInstance]) {
    return self;
  }
  if (other.hasIndexId) {
    [self setIndexId:other.indexId];
  }
  if (other.hasIndexValue) {
    [self setIndexValue:other.indexValue];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Index_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Index_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setIndexId:[input readString]];
        break;
      }
      case 18: {
        [self setIndexValue:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasIndexId {
  return result.hasIndexId;
}
- (NSString*) indexId {
  return result.indexId;
}
- (Index_Builder*) setIndexId:(NSString*) value {
  result.hasIndexId = YES;
  result.indexId = value;
  return self;
}
- (Index_Builder*) clearIndexId {
  result.hasIndexId = NO;
  result.indexId = @"";
  return self;
}
- (BOOL) hasIndexValue {
  return result.hasIndexValue;
}
- (NSString*) indexValue {
  return result.indexValue;
}
- (Index_Builder*) setIndexValue:(NSString*) value {
  result.hasIndexValue = YES;
  result.indexValue = value;
  return self;
}
- (Index_Builder*) clearIndexValue {
  result.hasIndexValue = NO;
  result.indexValue = @"";
  return self;
}
@end

@interface IndexList ()
@property (retain) NSMutableArray* mutableIndexList;
@end

@implementation IndexList

@synthesize mutableIndexList;
- (void) dealloc {
  self.mutableIndexList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static IndexList* defaultIndexListInstance = nil;
+ (void) initialize {
  if (self == [IndexList class]) {
    defaultIndexListInstance = [[IndexList alloc] init];
  }
}
+ (IndexList*) defaultInstance {
  return defaultIndexListInstance;
}
- (IndexList*) defaultInstance {
  return defaultIndexListInstance;
}
- (NSArray*) indexList {
  return mutableIndexList;
}
- (Index*) indexAtIndex:(int32_t) index {
  id value = [mutableIndexList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (Index* element in self.indexList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (Index* element in self.indexList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (Index* element in self.indexList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (IndexList*) parseFromData:(NSData*) data {
  return (IndexList*)[[[IndexList builder] mergeFromData:data] build];
}
+ (IndexList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IndexList*)[[[IndexList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IndexList*) parseFromInputStream:(NSInputStream*) input {
  return (IndexList*)[[[IndexList builder] mergeFromInputStream:input] build];
}
+ (IndexList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IndexList*)[[[IndexList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IndexList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IndexList*)[[[IndexList builder] mergeFromCodedInputStream:input] build];
}
+ (IndexList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IndexList*)[[[IndexList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IndexList_Builder*) builder {
  return [[[IndexList_Builder alloc] init] autorelease];
}
+ (IndexList_Builder*) builderWithPrototype:(IndexList*) prototype {
  return [[IndexList builder] mergeFrom:prototype];
}
- (IndexList_Builder*) builder {
  return [IndexList builder];
}
@end

@interface IndexList_Builder()
@property (retain) IndexList* result;
@end

@implementation IndexList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[IndexList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (IndexList_Builder*) clear {
  self.result = [[[IndexList alloc] init] autorelease];
  return self;
}
- (IndexList_Builder*) clone {
  return [IndexList builderWithPrototype:result];
}
- (IndexList*) defaultInstance {
  return [IndexList defaultInstance];
}
- (IndexList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IndexList*) buildPartial {
  IndexList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (IndexList_Builder*) mergeFrom:(IndexList*) other {
  if (other == [IndexList defaultInstance]) {
    return self;
  }
  if (other.mutableIndexList.count > 0) {
    if (result.mutableIndexList == nil) {
      result.mutableIndexList = [NSMutableArray array];
    }
    [result.mutableIndexList addObjectsFromArray:other.mutableIndexList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IndexList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IndexList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        Index_Builder* subBuilder = [Index builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addIndex:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) indexList {
  if (result.mutableIndexList == nil) { return [NSArray array]; }
  return result.mutableIndexList;
}
- (Index*) indexAtIndex:(int32_t) index {
  return [result indexAtIndex:index];
}
- (IndexList_Builder*) replaceIndexAtIndex:(int32_t) index with:(Index*) value {
  [result.mutableIndexList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (IndexList_Builder*) addAllIndex:(NSArray*) values {
  if (result.mutableIndexList == nil) {
    result.mutableIndexList = [NSMutableArray array];
  }
  [result.mutableIndexList addObjectsFromArray:values];
  return self;
}
- (IndexList_Builder*) clearIndexList {
  result.mutableIndexList = nil;
  return self;
}
- (IndexList_Builder*) addIndex:(Index*) value {
  if (result.mutableIndexList == nil) {
    result.mutableIndexList = [NSMutableArray array];
  }
  [result.mutableIndexList addObject:value];
  return self;
}
@end

@interface Document ()
@property (retain) NSString* dId;
@property (retain) NSString* typeId;
@property int32_t pageCount;
@property (retain) IndexList* indexList;
@end

@implementation Document

- (BOOL) hasDId {
  return !!hasDId_;
}
- (void) setHasDId:(BOOL) value {
  hasDId_ = !!value;
}
@synthesize dId;
- (BOOL) hasTypeId {
  return !!hasTypeId_;
}
- (void) setHasTypeId:(BOOL) value {
  hasTypeId_ = !!value;
}
@synthesize typeId;
- (BOOL) hasPageCount {
  return !!hasPageCount_;
}
- (void) setHasPageCount:(BOOL) value {
  hasPageCount_ = !!value;
}
@synthesize pageCount;
- (BOOL) hasIndexList {
  return !!hasIndexList_;
}
- (void) setHasIndexList:(BOOL) value {
  hasIndexList_ = !!value;
}
@synthesize indexList;
- (void) dealloc {
  self.dId = nil;
  self.typeId = nil;
  self.indexList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.dId = @"";
    self.typeId = @"";
    self.pageCount = 0;
    self.indexList = [IndexList defaultInstance];
  }
  return self;
}
static Document* defaultDocumentInstance = nil;
+ (void) initialize {
  if (self == [Document class]) {
    defaultDocumentInstance = [[Document alloc] init];
  }
}
+ (Document*) defaultInstance {
  return defaultDocumentInstance;
}
- (Document*) defaultInstance {
  return defaultDocumentInstance;
}
- (BOOL) isInitialized {
  if (!self.hasDId) {
    return NO;
  }
  if (!self.hasTypeId) {
    return NO;
  }
  if (!self.hasPageCount) {
    return NO;
  }
  if (self.hasIndexList) {
    if (!self.indexList.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDId) {
    [output writeString:1 value:self.dId];
  }
  if (self.hasTypeId) {
    [output writeString:2 value:self.typeId];
  }
  if (self.hasPageCount) {
    [output writeInt32:3 value:self.pageCount];
  }
  if (self.hasIndexList) {
    [output writeMessage:4 value:self.indexList];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasDId) {
    size += computeStringSize(1, self.dId);
  }
  if (self.hasTypeId) {
    size += computeStringSize(2, self.typeId);
  }
  if (self.hasPageCount) {
    size += computeInt32Size(3, self.pageCount);
  }
  if (self.hasIndexList) {
    size += computeMessageSize(4, self.indexList);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Document*) parseFromData:(NSData*) data {
  return (Document*)[[[Document builder] mergeFromData:data] build];
}
+ (Document*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Document*)[[[Document builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Document*) parseFromInputStream:(NSInputStream*) input {
  return (Document*)[[[Document builder] mergeFromInputStream:input] build];
}
+ (Document*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Document*)[[[Document builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Document*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Document*)[[[Document builder] mergeFromCodedInputStream:input] build];
}
+ (Document*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Document*)[[[Document builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Document_Builder*) builder {
  return [[[Document_Builder alloc] init] autorelease];
}
+ (Document_Builder*) builderWithPrototype:(Document*) prototype {
  return [[Document builder] mergeFrom:prototype];
}
- (Document_Builder*) builder {
  return [Document builder];
}
@end

@interface Document_Builder()
@property (retain) Document* result;
@end

@implementation Document_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Document alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Document_Builder*) clear {
  self.result = [[[Document alloc] init] autorelease];
  return self;
}
- (Document_Builder*) clone {
  return [Document builderWithPrototype:result];
}
- (Document*) defaultInstance {
  return [Document defaultInstance];
}
- (Document*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Document*) buildPartial {
  Document* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Document_Builder*) mergeFrom:(Document*) other {
  if (other == [Document defaultInstance]) {
    return self;
  }
  if (other.hasDId) {
    [self setDId:other.dId];
  }
  if (other.hasTypeId) {
    [self setTypeId:other.typeId];
  }
  if (other.hasPageCount) {
    [self setPageCount:other.pageCount];
  }
  if (other.hasIndexList) {
    [self mergeIndexList:other.indexList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Document_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Document_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setDId:[input readString]];
        break;
      }
      case 18: {
        [self setTypeId:[input readString]];
        break;
      }
      case 24: {
        [self setPageCount:[input readInt32]];
        break;
      }
      case 34: {
        IndexList_Builder* subBuilder = [IndexList builder];
        if (self.hasIndexList) {
          [subBuilder mergeFrom:self.indexList];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setIndexList:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasDId {
  return result.hasDId;
}
- (NSString*) dId {
  return result.dId;
}
- (Document_Builder*) setDId:(NSString*) value {
  result.hasDId = YES;
  result.dId = value;
  return self;
}
- (Document_Builder*) clearDId {
  result.hasDId = NO;
  result.dId = @"";
  return self;
}
- (BOOL) hasTypeId {
  return result.hasTypeId;
}
- (NSString*) typeId {
  return result.typeId;
}
- (Document_Builder*) setTypeId:(NSString*) value {
  result.hasTypeId = YES;
  result.typeId = value;
  return self;
}
- (Document_Builder*) clearTypeId {
  result.hasTypeId = NO;
  result.typeId = @"";
  return self;
}
- (BOOL) hasPageCount {
  return result.hasPageCount;
}
- (int32_t) pageCount {
  return result.pageCount;
}
- (Document_Builder*) setPageCount:(int32_t) value {
  result.hasPageCount = YES;
  result.pageCount = value;
  return self;
}
- (Document_Builder*) clearPageCount {
  result.hasPageCount = NO;
  result.pageCount = 0;
  return self;
}
- (BOOL) hasIndexList {
  return result.hasIndexList;
}
- (IndexList*) indexList {
  return result.indexList;
}
- (Document_Builder*) setIndexList:(IndexList*) value {
  result.hasIndexList = YES;
  result.indexList = value;
  return self;
}
- (Document_Builder*) setIndexListBuilder:(IndexList_Builder*) builderForValue {
  return [self setIndexList:[builderForValue build]];
}
- (Document_Builder*) mergeIndexList:(IndexList*) value {
  if (result.hasIndexList &&
      result.indexList != [IndexList defaultInstance]) {
    result.indexList =
      [[[IndexList builderWithPrototype:result.indexList] mergeFrom:value] buildPartial];
  } else {
    result.indexList = value;
  }
  result.hasIndexList = YES;
  return self;
}
- (Document_Builder*) clearIndexList {
  result.hasIndexList = NO;
  result.indexList = [IndexList defaultInstance];
  return self;
}
@end

@interface DocumentList ()
@property (retain) NSMutableArray* mutableDocumentList;
@end

@implementation DocumentList

@synthesize mutableDocumentList;
- (void) dealloc {
  self.mutableDocumentList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static DocumentList* defaultDocumentListInstance = nil;
+ (void) initialize {
  if (self == [DocumentList class]) {
    defaultDocumentListInstance = [[DocumentList alloc] init];
  }
}
+ (DocumentList*) defaultInstance {
  return defaultDocumentListInstance;
}
- (DocumentList*) defaultInstance {
  return defaultDocumentListInstance;
}
- (NSArray*) documentList {
  return mutableDocumentList;
}
- (Document*) documentAtIndex:(int32_t) index {
  id value = [mutableDocumentList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (Document* element in self.documentList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (Document* element in self.documentList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (Document* element in self.documentList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (DocumentList*) parseFromData:(NSData*) data {
  return (DocumentList*)[[[DocumentList builder] mergeFromData:data] build];
}
+ (DocumentList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DocumentList*)[[[DocumentList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (DocumentList*) parseFromInputStream:(NSInputStream*) input {
  return (DocumentList*)[[[DocumentList builder] mergeFromInputStream:input] build];
}
+ (DocumentList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DocumentList*)[[[DocumentList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DocumentList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (DocumentList*)[[[DocumentList builder] mergeFromCodedInputStream:input] build];
}
+ (DocumentList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DocumentList*)[[[DocumentList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DocumentList_Builder*) builder {
  return [[[DocumentList_Builder alloc] init] autorelease];
}
+ (DocumentList_Builder*) builderWithPrototype:(DocumentList*) prototype {
  return [[DocumentList builder] mergeFrom:prototype];
}
- (DocumentList_Builder*) builder {
  return [DocumentList builder];
}
@end

@interface DocumentList_Builder()
@property (retain) DocumentList* result;
@end

@implementation DocumentList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[DocumentList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (DocumentList_Builder*) clear {
  self.result = [[[DocumentList alloc] init] autorelease];
  return self;
}
- (DocumentList_Builder*) clone {
  return [DocumentList builderWithPrototype:result];
}
- (DocumentList*) defaultInstance {
  return [DocumentList defaultInstance];
}
- (DocumentList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (DocumentList*) buildPartial {
  DocumentList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (DocumentList_Builder*) mergeFrom:(DocumentList*) other {
  if (other == [DocumentList defaultInstance]) {
    return self;
  }
  if (other.mutableDocumentList.count > 0) {
    if (result.mutableDocumentList == nil) {
      result.mutableDocumentList = [NSMutableArray array];
    }
    [result.mutableDocumentList addObjectsFromArray:other.mutableDocumentList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (DocumentList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (DocumentList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        Document_Builder* subBuilder = [Document builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDocument:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) documentList {
  if (result.mutableDocumentList == nil) { return [NSArray array]; }
  return result.mutableDocumentList;
}
- (Document*) documentAtIndex:(int32_t) index {
  return [result documentAtIndex:index];
}
- (DocumentList_Builder*) replaceDocumentAtIndex:(int32_t) index with:(Document*) value {
  [result.mutableDocumentList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (DocumentList_Builder*) addAllDocument:(NSArray*) values {
  if (result.mutableDocumentList == nil) {
    result.mutableDocumentList = [NSMutableArray array];
  }
  [result.mutableDocumentList addObjectsFromArray:values];
  return self;
}
- (DocumentList_Builder*) clearDocumentList {
  result.mutableDocumentList = nil;
  return self;
}
- (DocumentList_Builder*) addDocument:(Document*) value {
  if (result.mutableDocumentList == nil) {
    result.mutableDocumentList = [NSMutableArray array];
  }
  [result.mutableDocumentList addObject:value];
  return self;
}
@end

@interface Process ()
@property (retain) NSString* pId;
@property (retain) NSString* orderId;
@property (retain) NSString* typeId;
@property (retain) NSString* entryDate;
@property (retain) NSString* resubmitDate;
@property (retain) IndexList* indexList;
@property (retain) DocumentList* documentList;
@end

@implementation Process

- (BOOL) hasPId {
  return !!hasPId_;
}
- (void) setHasPId:(BOOL) value {
  hasPId_ = !!value;
}
@synthesize pId;
- (BOOL) hasOrderId {
  return !!hasOrderId_;
}
- (void) setHasOrderId:(BOOL) value {
  hasOrderId_ = !!value;
}
@synthesize orderId;
- (BOOL) hasTypeId {
  return !!hasTypeId_;
}
- (void) setHasTypeId:(BOOL) value {
  hasTypeId_ = !!value;
}
@synthesize typeId;
- (BOOL) hasEntryDate {
  return !!hasEntryDate_;
}
- (void) setHasEntryDate:(BOOL) value {
  hasEntryDate_ = !!value;
}
@synthesize entryDate;
- (BOOL) hasResubmitDate {
  return !!hasResubmitDate_;
}
- (void) setHasResubmitDate:(BOOL) value {
  hasResubmitDate_ = !!value;
}
@synthesize resubmitDate;
- (BOOL) hasIndexList {
  return !!hasIndexList_;
}
- (void) setHasIndexList:(BOOL) value {
  hasIndexList_ = !!value;
}
@synthesize indexList;
- (BOOL) hasDocumentList {
  return !!hasDocumentList_;
}
- (void) setHasDocumentList:(BOOL) value {
  hasDocumentList_ = !!value;
}
@synthesize documentList;
- (void) dealloc {
  self.pId = nil;
  self.orderId = nil;
  self.typeId = nil;
  self.entryDate = nil;
  self.resubmitDate = nil;
  self.indexList = nil;
  self.documentList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.pId = @"";
    self.orderId = @"";
    self.typeId = @"";
    self.entryDate = @"";
    self.resubmitDate = @"";
    self.indexList = [IndexList defaultInstance];
    self.documentList = [DocumentList defaultInstance];
  }
  return self;
}
static Process* defaultProcessInstance = nil;
+ (void) initialize {
  if (self == [Process class]) {
    defaultProcessInstance = [[Process alloc] init];
  }
}
+ (Process*) defaultInstance {
  return defaultProcessInstance;
}
- (Process*) defaultInstance {
  return defaultProcessInstance;
}
- (BOOL) isInitialized {
  if (!self.hasPId) {
    return NO;
  }
  if (!self.hasOrderId) {
    return NO;
  }
  if (!self.hasTypeId) {
    return NO;
  }
  if (!self.hasEntryDate) {
    return NO;
  }
  if (!self.hasResubmitDate) {
    return NO;
  }
  if (!self.hasDocumentList) {
    return NO;
  }
  if (self.hasIndexList) {
    if (!self.indexList.isInitialized) {
      return NO;
    }
  }
  if (!self.documentList.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPId) {
    [output writeString:1 value:self.pId];
  }
  if (self.hasOrderId) {
    [output writeString:2 value:self.orderId];
  }
  if (self.hasTypeId) {
    [output writeString:3 value:self.typeId];
  }
  if (self.hasEntryDate) {
    [output writeString:4 value:self.entryDate];
  }
  if (self.hasResubmitDate) {
    [output writeString:5 value:self.resubmitDate];
  }
  if (self.hasIndexList) {
    [output writeMessage:6 value:self.indexList];
  }
  if (self.hasDocumentList) {
    [output writeMessage:7 value:self.documentList];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasPId) {
    size += computeStringSize(1, self.pId);
  }
  if (self.hasOrderId) {
    size += computeStringSize(2, self.orderId);
  }
  if (self.hasTypeId) {
    size += computeStringSize(3, self.typeId);
  }
  if (self.hasEntryDate) {
    size += computeStringSize(4, self.entryDate);
  }
  if (self.hasResubmitDate) {
    size += computeStringSize(5, self.resubmitDate);
  }
  if (self.hasIndexList) {
    size += computeMessageSize(6, self.indexList);
  }
  if (self.hasDocumentList) {
    size += computeMessageSize(7, self.documentList);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Process*) parseFromData:(NSData*) data {
  return (Process*)[[[Process builder] mergeFromData:data] build];
}
+ (Process*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Process*)[[[Process builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Process*) parseFromInputStream:(NSInputStream*) input {
  return (Process*)[[[Process builder] mergeFromInputStream:input] build];
}
+ (Process*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Process*)[[[Process builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Process*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Process*)[[[Process builder] mergeFromCodedInputStream:input] build];
}
+ (Process*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Process*)[[[Process builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Process_Builder*) builder {
  return [[[Process_Builder alloc] init] autorelease];
}
+ (Process_Builder*) builderWithPrototype:(Process*) prototype {
  return [[Process builder] mergeFrom:prototype];
}
- (Process_Builder*) builder {
  return [Process builder];
}
@end

@interface Process_Builder()
@property (retain) Process* result;
@end

@implementation Process_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Process alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Process_Builder*) clear {
  self.result = [[[Process alloc] init] autorelease];
  return self;
}
- (Process_Builder*) clone {
  return [Process builderWithPrototype:result];
}
- (Process*) defaultInstance {
  return [Process defaultInstance];
}
- (Process*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Process*) buildPartial {
  Process* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Process_Builder*) mergeFrom:(Process*) other {
  if (other == [Process defaultInstance]) {
    return self;
  }
  if (other.hasPId) {
    [self setPId:other.pId];
  }
  if (other.hasOrderId) {
    [self setOrderId:other.orderId];
  }
  if (other.hasTypeId) {
    [self setTypeId:other.typeId];
  }
  if (other.hasEntryDate) {
    [self setEntryDate:other.entryDate];
  }
  if (other.hasResubmitDate) {
    [self setResubmitDate:other.resubmitDate];
  }
  if (other.hasIndexList) {
    [self mergeIndexList:other.indexList];
  }
  if (other.hasDocumentList) {
    [self mergeDocumentList:other.documentList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Process_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Process_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setPId:[input readString]];
        break;
      }
      case 18: {
        [self setOrderId:[input readString]];
        break;
      }
      case 26: {
        [self setTypeId:[input readString]];
        break;
      }
      case 34: {
        [self setEntryDate:[input readString]];
        break;
      }
      case 42: {
        [self setResubmitDate:[input readString]];
        break;
      }
      case 50: {
        IndexList_Builder* subBuilder = [IndexList builder];
        if (self.hasIndexList) {
          [subBuilder mergeFrom:self.indexList];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setIndexList:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        DocumentList_Builder* subBuilder = [DocumentList builder];
        if (self.hasDocumentList) {
          [subBuilder mergeFrom:self.documentList];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDocumentList:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasPId {
  return result.hasPId;
}
- (NSString*) pId {
  return result.pId;
}
- (Process_Builder*) setPId:(NSString*) value {
  result.hasPId = YES;
  result.pId = value;
  return self;
}
- (Process_Builder*) clearPId {
  result.hasPId = NO;
  result.pId = @"";
  return self;
}
- (BOOL) hasOrderId {
  return result.hasOrderId;
}
- (NSString*) orderId {
  return result.orderId;
}
- (Process_Builder*) setOrderId:(NSString*) value {
  result.hasOrderId = YES;
  result.orderId = value;
  return self;
}
- (Process_Builder*) clearOrderId {
  result.hasOrderId = NO;
  result.orderId = @"";
  return self;
}
- (BOOL) hasTypeId {
  return result.hasTypeId;
}
- (NSString*) typeId {
  return result.typeId;
}
- (Process_Builder*) setTypeId:(NSString*) value {
  result.hasTypeId = YES;
  result.typeId = value;
  return self;
}
- (Process_Builder*) clearTypeId {
  result.hasTypeId = NO;
  result.typeId = @"";
  return self;
}
- (BOOL) hasEntryDate {
  return result.hasEntryDate;
}
- (NSString*) entryDate {
  return result.entryDate;
}
- (Process_Builder*) setEntryDate:(NSString*) value {
  result.hasEntryDate = YES;
  result.entryDate = value;
  return self;
}
- (Process_Builder*) clearEntryDate {
  result.hasEntryDate = NO;
  result.entryDate = @"";
  return self;
}
- (BOOL) hasResubmitDate {
  return result.hasResubmitDate;
}
- (NSString*) resubmitDate {
  return result.resubmitDate;
}
- (Process_Builder*) setResubmitDate:(NSString*) value {
  result.hasResubmitDate = YES;
  result.resubmitDate = value;
  return self;
}
- (Process_Builder*) clearResubmitDate {
  result.hasResubmitDate = NO;
  result.resubmitDate = @"";
  return self;
}
- (BOOL) hasIndexList {
  return result.hasIndexList;
}
- (IndexList*) indexList {
  return result.indexList;
}
- (Process_Builder*) setIndexList:(IndexList*) value {
  result.hasIndexList = YES;
  result.indexList = value;
  return self;
}
- (Process_Builder*) setIndexListBuilder:(IndexList_Builder*) builderForValue {
  return [self setIndexList:[builderForValue build]];
}
- (Process_Builder*) mergeIndexList:(IndexList*) value {
  if (result.hasIndexList &&
      result.indexList != [IndexList defaultInstance]) {
    result.indexList =
      [[[IndexList builderWithPrototype:result.indexList] mergeFrom:value] buildPartial];
  } else {
    result.indexList = value;
  }
  result.hasIndexList = YES;
  return self;
}
- (Process_Builder*) clearIndexList {
  result.hasIndexList = NO;
  result.indexList = [IndexList defaultInstance];
  return self;
}
- (BOOL) hasDocumentList {
  return result.hasDocumentList;
}
- (DocumentList*) documentList {
  return result.documentList;
}
- (Process_Builder*) setDocumentList:(DocumentList*) value {
  result.hasDocumentList = YES;
  result.documentList = value;
  return self;
}
- (Process_Builder*) setDocumentListBuilder:(DocumentList_Builder*) builderForValue {
  return [self setDocumentList:[builderForValue build]];
}
- (Process_Builder*) mergeDocumentList:(DocumentList*) value {
  if (result.hasDocumentList &&
      result.documentList != [DocumentList defaultInstance]) {
    result.documentList =
      [[[DocumentList builderWithPrototype:result.documentList] mergeFrom:value] buildPartial];
  } else {
    result.documentList = value;
  }
  result.hasDocumentList = YES;
  return self;
}
- (Process_Builder*) clearDocumentList {
  result.hasDocumentList = NO;
  result.documentList = [DocumentList defaultInstance];
  return self;
}
@end

@interface ProcessList ()
@property (retain) NSMutableArray* mutableProcessList;
@end

@implementation ProcessList

@synthesize mutableProcessList;
- (void) dealloc {
  self.mutableProcessList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static ProcessList* defaultProcessListInstance = nil;
+ (void) initialize {
  if (self == [ProcessList class]) {
    defaultProcessListInstance = [[ProcessList alloc] init];
  }
}
+ (ProcessList*) defaultInstance {
  return defaultProcessListInstance;
}
- (ProcessList*) defaultInstance {
  return defaultProcessListInstance;
}
- (NSArray*) processList {
  return mutableProcessList;
}
- (Process*) processAtIndex:(int32_t) index {
  id value = [mutableProcessList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (Process* element in self.processList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (Process* element in self.processList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (Process* element in self.processList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (ProcessList*) parseFromData:(NSData*) data {
  return (ProcessList*)[[[ProcessList builder] mergeFromData:data] build];
}
+ (ProcessList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProcessList*)[[[ProcessList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ProcessList*) parseFromInputStream:(NSInputStream*) input {
  return (ProcessList*)[[[ProcessList builder] mergeFromInputStream:input] build];
}
+ (ProcessList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProcessList*)[[[ProcessList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ProcessList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ProcessList*)[[[ProcessList builder] mergeFromCodedInputStream:input] build];
}
+ (ProcessList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProcessList*)[[[ProcessList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ProcessList_Builder*) builder {
  return [[[ProcessList_Builder alloc] init] autorelease];
}
+ (ProcessList_Builder*) builderWithPrototype:(ProcessList*) prototype {
  return [[ProcessList builder] mergeFrom:prototype];
}
- (ProcessList_Builder*) builder {
  return [ProcessList builder];
}
@end

@interface ProcessList_Builder()
@property (retain) ProcessList* result;
@end

@implementation ProcessList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[ProcessList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ProcessList_Builder*) clear {
  self.result = [[[ProcessList alloc] init] autorelease];
  return self;
}
- (ProcessList_Builder*) clone {
  return [ProcessList builderWithPrototype:result];
}
- (ProcessList*) defaultInstance {
  return [ProcessList defaultInstance];
}
- (ProcessList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ProcessList*) buildPartial {
  ProcessList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (ProcessList_Builder*) mergeFrom:(ProcessList*) other {
  if (other == [ProcessList defaultInstance]) {
    return self;
  }
  if (other.mutableProcessList.count > 0) {
    if (result.mutableProcessList == nil) {
      result.mutableProcessList = [NSMutableArray array];
    }
    [result.mutableProcessList addObjectsFromArray:other.mutableProcessList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ProcessList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ProcessList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        Process_Builder* subBuilder = [Process builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addProcess:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) processList {
  if (result.mutableProcessList == nil) { return [NSArray array]; }
  return result.mutableProcessList;
}
- (Process*) processAtIndex:(int32_t) index {
  return [result processAtIndex:index];
}
- (ProcessList_Builder*) replaceProcessAtIndex:(int32_t) index with:(Process*) value {
  [result.mutableProcessList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (ProcessList_Builder*) addAllProcess:(NSArray*) values {
  if (result.mutableProcessList == nil) {
    result.mutableProcessList = [NSMutableArray array];
  }
  [result.mutableProcessList addObjectsFromArray:values];
  return self;
}
- (ProcessList_Builder*) clearProcessList {
  result.mutableProcessList = nil;
  return self;
}
- (ProcessList_Builder*) addProcess:(Process*) value {
  if (result.mutableProcessList == nil) {
    result.mutableProcessList = [NSMutableArray array];
  }
  [result.mutableProcessList addObject:value];
  return self;
}
@end

