// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "MandantList.pb.h"

@implementation MandantListRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [MandantListRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface Mandant ()
@property (retain) NSString* id;
@property (retain) NSString* name;
@end

@implementation Mandant
@synthesize isAdded,arrWb;

-(id)initWithId:(NSString*)idPar name:(NSString*)namePar{
	self=[super init];
	if (self) {		
		self.name=namePar;
		self.id=idPar;
		self.isAdded=FALSE;
		self.arrWb=[[NSMutableArray alloc] init];
	}
	return self;
}

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (void) dealloc {
  self.id = nil;
  self.name = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = @"";
    self.name = @"";
  }
  return self;
}
static Mandant* defaultMandantInstance = nil;
+ (void) initialize {
  if (self == [Mandant class]) {
    defaultMandantInstance = [[Mandant alloc] init];
  }
}
+ (Mandant*) defaultInstance {
  return defaultMandantInstance;
}
- (Mandant*) defaultInstance {
  return defaultMandantInstance;
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeString:1 value:self.id];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasId) {
    size += computeStringSize(1, self.id);
  }
  if (self.hasName) {
    size += computeStringSize(2, self.name);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Mandant*) parseFromData:(NSData*) data {
  return (Mandant*)[[[Mandant builder] mergeFromData:data] build];
}
+ (Mandant*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Mandant*)[[[Mandant builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Mandant*) parseFromInputStream:(NSInputStream*) input {
  return (Mandant*)[[[Mandant builder] mergeFromInputStream:input] build];
}
+ (Mandant*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Mandant*)[[[Mandant builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Mandant*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Mandant*)[[[Mandant builder] mergeFromCodedInputStream:input] build];
}
+ (Mandant*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Mandant*)[[[Mandant builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Mandant_Builder*) builder {
  return [[[Mandant_Builder alloc] init] autorelease];
}
+ (Mandant_Builder*) builderWithPrototype:(Mandant*) prototype {
  return [[Mandant builder] mergeFrom:prototype];
}
- (Mandant_Builder*) builder {
  return [Mandant builder];
}
@end

@interface Mandant_Builder()
@property (retain) Mandant* result;
@end

@implementation Mandant_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Mandant alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Mandant_Builder*) clear {
  self.result = [[[Mandant alloc] init] autorelease];
  return self;
}
- (Mandant_Builder*) clone {
  return [Mandant builderWithPrototype:result];
}
- (Mandant*) defaultInstance {
  return [Mandant defaultInstance];
}
- (Mandant*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Mandant*) buildPartial {
  Mandant* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Mandant_Builder*) mergeFrom:(Mandant*) other {
  if (other == [Mandant defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Mandant_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Mandant_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setId:[input readString]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (NSString*) id {
  return result.id;
}
- (Mandant_Builder*) setId:(NSString*) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (Mandant_Builder*) clearId {
  result.hasId = NO;
  result.id = @"";
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (Mandant_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (Mandant_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
@end

@interface MandantList ()
@property (retain) NSMutableArray* mutableMandantList;
@end

@implementation MandantList

@synthesize mutableMandantList;
- (void) dealloc {
  self.mutableMandantList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static MandantList* defaultMandantListInstance = nil;
+ (void) initialize {
  if (self == [MandantList class]) {
    defaultMandantListInstance = [[MandantList alloc] init];
  }
}
+ (MandantList*) defaultInstance {
  return defaultMandantListInstance;
}
- (MandantList*) defaultInstance {
  return defaultMandantListInstance;
}
- (NSArray*) mandantList {
  return mutableMandantList;
}
- (Mandant*) mandantAtIndex:(int32_t) index {
  id value = [mutableMandantList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (Mandant* element in self.mandantList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (Mandant* element in self.mandantList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (Mandant* element in self.mandantList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MandantList*) parseFromData:(NSData*) data {
  return (MandantList*)[[[MandantList builder] mergeFromData:data] build];
}
+ (MandantList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MandantList*)[[[MandantList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MandantList*) parseFromInputStream:(NSInputStream*) input {
  return (MandantList*)[[[MandantList builder] mergeFromInputStream:input] build];
}
+ (MandantList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MandantList*)[[[MandantList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MandantList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MandantList*)[[[MandantList builder] mergeFromCodedInputStream:input] build];
}
+ (MandantList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MandantList*)[[[MandantList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MandantList_Builder*) builder {
  return [[[MandantList_Builder alloc] init] autorelease];
}
+ (MandantList_Builder*) builderWithPrototype:(MandantList*) prototype {
  return [[MandantList builder] mergeFrom:prototype];
}
- (MandantList_Builder*) builder {
  return [MandantList builder];
}
@end

@interface MandantList_Builder()
@property (retain) MandantList* result;
@end

@implementation MandantList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MandantList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MandantList_Builder*) clear {
  self.result = [[[MandantList alloc] init] autorelease];
  return self;
}
- (MandantList_Builder*) clone {
  return [MandantList builderWithPrototype:result];
}
- (MandantList*) defaultInstance {
  return [MandantList defaultInstance];
}
- (MandantList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MandantList*) buildPartial {
  MandantList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MandantList_Builder*) mergeFrom:(MandantList*) other {
  if (other == [MandantList defaultInstance]) {
    return self;
  }
  if (other.mutableMandantList.count > 0) {
    if (result.mutableMandantList == nil) {
      result.mutableMandantList = [NSMutableArray array];
    }
    [result.mutableMandantList addObjectsFromArray:other.mutableMandantList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MandantList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MandantList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        Mandant_Builder* subBuilder = [Mandant builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addMandant:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) mandantList {
  if (result.mutableMandantList == nil) { return [NSArray array]; }
  return result.mutableMandantList;
}
- (Mandant*) mandantAtIndex:(int32_t) index {
  return [result mandantAtIndex:index];
}
- (MandantList_Builder*) replaceMandantAtIndex:(int32_t) index with:(Mandant*) value {
  [result.mutableMandantList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (MandantList_Builder*) addAllMandant:(NSArray*) values {
  if (result.mutableMandantList == nil) {
    result.mutableMandantList = [NSMutableArray array];
  }
  [result.mutableMandantList addObjectsFromArray:values];
  return self;
}
- (MandantList_Builder*) clearMandantList {
  result.mutableMandantList = nil;
  return self;
}
- (MandantList_Builder*) addMandant:(Mandant*) value {
  if (result.mutableMandantList == nil) {
    result.mutableMandantList = [NSMutableArray array];
  }
  [result.mutableMandantList addObject:value];
  return self;
}
@end

