// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "ProcessList.pb.h"

@implementation ProcessListRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ProcessListRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface Process ()
@property (retain) NSString* pId;
@property (retain) NSString* orderId;
@property (retain) NSString* typeId;
@property (retain) NSString* entryDate;
@property (retain) DocumentList* documentList;
@property BOOL hasRead;
@end

@implementation Process

- (BOOL) hasPId {
  return !!hasPId_;
}
- (void) setHasPId:(BOOL) value {
  hasPId_ = !!value;
}
@synthesize pId;
- (BOOL) hasOrderId {
  return !!hasOrderId_;
}
- (void) setHasOrderId:(BOOL) value {
  hasOrderId_ = !!value;
}
@synthesize orderId;
- (BOOL) hasTypeId {
  return !!hasTypeId_;
}
- (void) setHasTypeId:(BOOL) value {
  hasTypeId_ = !!value;
}
@synthesize typeId;
- (BOOL) hasEntryDate {
  return !!hasEntryDate_;
}
- (void) setHasEntryDate:(BOOL) value {
  hasEntryDate_ = !!value;
}
@synthesize entryDate;
- (BOOL) hasDocumentList {
  return !!hasDocumentList_;
}
- (void) setHasDocumentList:(BOOL) value {
  hasDocumentList_ = !!value;
}
@synthesize documentList;
- (void) dealloc {
  self.pId = nil;
  self.orderId = nil;
  self.typeId = nil;
  self.entryDate = nil;
  self.documentList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.pId = @"";
    self.orderId = @"";
    self.typeId = @"";
    self.entryDate = @"";
    self.documentList = [DocumentList defaultInstance];
  }
  return self;
}
static Process* defaultProcessInstance = nil;
+ (void) initialize {
  if (self == [Process class]) {
    defaultProcessInstance = [[Process alloc] init];
  }
}
+ (Process*) defaultInstance {
  return defaultProcessInstance;
}
- (Process*) defaultInstance {
  return defaultProcessInstance;
}
- (BOOL) isInitialized {
  if (!self.hasPId) {
    return NO;
  }
  if (!self.hasOrderId) {
    return NO;
  }
  if (!self.hasTypeId) {
    return NO;
  }
  if (!self.hasEntryDate) {
    return NO;
  }
  if (!self.hasDocumentList) {
    return NO;
  }
  if (!self.documentList.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPId) {
    [output writeString:1 value:self.pId];
  }
  if (self.hasOrderId) {
    [output writeString:2 value:self.orderId];
  }
  if (self.hasTypeId) {
    [output writeString:3 value:self.typeId];
  }
  if (self.hasEntryDate) {
    [output writeString:4 value:self.entryDate];
  }
  if (self.hasDocumentList) {
    [output writeMessage:12 value:self.documentList];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasPId) {
    size += computeStringSize(1, self.pId);
  }
  if (self.hasOrderId) {
    size += computeStringSize(2, self.orderId);
  }
  if (self.hasTypeId) {
    size += computeStringSize(3, self.typeId);
  }
  if (self.hasEntryDate) {
    size += computeStringSize(4, self.entryDate);
  }
  if (self.hasDocumentList) {
    size += computeMessageSize(12, self.documentList);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Process*) parseFromData:(NSData*) data {
  return (Process*)[[[Process builder] mergeFromData:data] build];
}
+ (Process*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Process*)[[[Process builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Process*) parseFromInputStream:(NSInputStream*) input {
  return (Process*)[[[Process builder] mergeFromInputStream:input] build];
}
+ (Process*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Process*)[[[Process builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Process*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Process*)[[[Process builder] mergeFromCodedInputStream:input] build];
}
+ (Process*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Process*)[[[Process builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Process_Builder*) builder {
  return [[[Process_Builder alloc] init] autorelease];
}
+ (Process_Builder*) builderWithPrototype:(Process*) prototype {
  return [[Process builder] mergeFrom:prototype];
}
- (Process_Builder*) builder {
  return [Process builder];
}
@end

@interface Process_Builder()
@property (retain) Process* result;
@end

@implementation Process_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Process alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Process_Builder*) clear {
  self.result = [[[Process alloc] init] autorelease];
  return self;
}
- (Process_Builder*) clone {
  return [Process builderWithPrototype:result];
}
- (Process*) defaultInstance {
  return [Process defaultInstance];
}
- (Process*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Process*) buildPartial {
  Process* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Process_Builder*) mergeFrom:(Process*) other {
  if (other == [Process defaultInstance]) {
    return self;
  }
  if (other.hasPId) {
    [self setPId:other.pId];
  }
  if (other.hasOrderId) {
    [self setOrderId:other.orderId];
  }
  if (other.hasTypeId) {
    [self setTypeId:other.typeId];
  }
  if (other.hasEntryDate) {
    [self setEntryDate:other.entryDate];
  }
  if (other.hasDocumentList) {
    [self mergeDocumentList:other.documentList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Process_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Process_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setPId:[input readString]];
        break;
      }
      case 18: {
        [self setOrderId:[input readString]];
        break;
      }
      case 26: {
        [self setTypeId:[input readString]];
        break;
      }
      case 34: {
        [self setEntryDate:[input readString]];
        break;
      }
      case 98: {
        DocumentList_Builder* subBuilder = [DocumentList builder];
        if (self.hasDocumentList) {
          [subBuilder mergeFrom:self.documentList];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDocumentList:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasPId {
  return result.hasPId;
}
- (NSString*) pId {
  return result.pId;
}
- (Process_Builder*) setPId:(NSString*) value {
  result.hasPId = YES;
  result.pId = value;
  return self;
}
- (Process_Builder*) clearPId {
  result.hasPId = NO;
  result.pId = @"";
  return self;
}
- (BOOL) hasOrderId {
  return result.hasOrderId;
}
- (NSString*) orderId {
  return result.orderId;
}
- (Process_Builder*) setOrderId:(NSString*) value {
  result.hasOrderId = YES;
  result.orderId = value;
  return self;
}
- (Process_Builder*) clearOrderId {
  result.hasOrderId = NO;
  result.orderId = @"";
  return self;
}
- (BOOL) hasTypeId {
  return result.hasTypeId;
}
- (NSString*) typeId {
  return result.typeId;
}
- (Process_Builder*) setTypeId:(NSString*) value {
  result.hasTypeId = YES;
  result.typeId = value;
  return self;
}
- (Process_Builder*) clearTypeId {
  result.hasTypeId = NO;
  result.typeId = @"";
  return self;
}
- (BOOL) hasEntryDate {
  return result.hasEntryDate;
}
- (NSString*) entryDate {
  return result.entryDate;
}
- (Process_Builder*) setEntryDate:(NSString*) value {
  result.hasEntryDate = YES;
  result.entryDate = value;
  return self;
}
- (Process_Builder*) clearEntryDate {
  result.hasEntryDate = NO;
  result.entryDate = @"";
  return self;
}
- (BOOL) hasDocumentList {
  return result.hasDocumentList;
}
- (DocumentList*) documentList {
  return result.documentList;
}
- (Process_Builder*) setDocumentList:(DocumentList*) value {
  result.hasDocumentList = YES;
  result.documentList = value;
  return self;
}
- (Process_Builder*) setDocumentListBuilder:(DocumentList_Builder*) builderForValue {
  return [self setDocumentList:[builderForValue build]];
}
- (Process_Builder*) mergeDocumentList:(DocumentList*) value {
  if (result.hasDocumentList &&
      result.documentList != [DocumentList defaultInstance]) {
    result.documentList =
      [[[DocumentList builderWithPrototype:result.documentList] mergeFrom:value] buildPartial];
  } else {
    result.documentList = value;
  }
  result.hasDocumentList = YES;
  return self;
}
- (Process_Builder*) clearDocumentList {
  result.hasDocumentList = NO;
  result.documentList = [DocumentList defaultInstance];
  return self;
}
@end

@interface ProcessList ()
@property (retain) NSMutableArray* mutableProcessList;
@end

@implementation ProcessList

@synthesize mutableProcessList;
- (void) dealloc {
  self.mutableProcessList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static ProcessList* defaultProcessListInstance = nil;
+ (void) initialize {
  if (self == [ProcessList class]) {
    defaultProcessListInstance = [[ProcessList alloc] init];
  }
}
+ (ProcessList*) defaultInstance {
  return defaultProcessListInstance;
}
- (ProcessList*) defaultInstance {
  return defaultProcessListInstance;
}
- (NSArray*) processList {
  return mutableProcessList;
}
- (Process*) processAtIndex:(int32_t) index {
  id value = [mutableProcessList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (Process* element in self.processList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (Process* element in self.processList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (Process* element in self.processList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (ProcessList*) parseFromData:(NSData*) data {
  return (ProcessList*)[[[ProcessList builder] mergeFromData:data] build];
}
+ (ProcessList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProcessList*)[[[ProcessList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ProcessList*) parseFromInputStream:(NSInputStream*) input {
  return (ProcessList*)[[[ProcessList builder] mergeFromInputStream:input] build];
}
+ (ProcessList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProcessList*)[[[ProcessList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ProcessList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ProcessList*)[[[ProcessList builder] mergeFromCodedInputStream:input] build];
}
+ (ProcessList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProcessList*)[[[ProcessList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ProcessList_Builder*) builder {
  return [[[ProcessList_Builder alloc] init] autorelease];
}
+ (ProcessList_Builder*) builderWithPrototype:(ProcessList*) prototype {
  return [[ProcessList builder] mergeFrom:prototype];
}
- (ProcessList_Builder*) builder {
  return [ProcessList builder];
}
@end

@interface ProcessList_Builder()
@property (retain) ProcessList* result;
@end

@implementation ProcessList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[ProcessList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ProcessList_Builder*) clear {
  self.result = [[[ProcessList alloc] init] autorelease];
  return self;
}
- (ProcessList_Builder*) clone {
  return [ProcessList builderWithPrototype:result];
}
- (ProcessList*) defaultInstance {
  return [ProcessList defaultInstance];
}
- (ProcessList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ProcessList*) buildPartial {
  ProcessList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (ProcessList_Builder*) mergeFrom:(ProcessList*) other {
  if (other == [ProcessList defaultInstance]) {
    return self;
  }
  if (other.mutableProcessList.count > 0) {
    if (result.mutableProcessList == nil) {
      result.mutableProcessList = [NSMutableArray array];
    }
    [result.mutableProcessList addObjectsFromArray:other.mutableProcessList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ProcessList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ProcessList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        Process_Builder* subBuilder = [Process builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addProcess:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) processList {
  if (result.mutableProcessList == nil) { return [NSArray array]; }
  return result.mutableProcessList;
}
- (Process*) processAtIndex:(int32_t) index {
  return [result processAtIndex:index];
}
- (ProcessList_Builder*) replaceProcessAtIndex:(int32_t) index with:(Process*) value {
  [result.mutableProcessList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (ProcessList_Builder*) addAllProcess:(NSArray*) values {
  if (result.mutableProcessList == nil) {
    result.mutableProcessList = [NSMutableArray array];
  }
  [result.mutableProcessList addObjectsFromArray:values];
  return self;
}
- (ProcessList_Builder*) clearProcessList {
  result.mutableProcessList = nil;
  return self;
}
- (ProcessList_Builder*) addProcess:(Process*) value {
  if (result.mutableProcessList == nil) {
    result.mutableProcessList = [NSMutableArray array];
  }
  [result.mutableProcessList addObject:value];
  return self;
}
@end

@interface Document ()
@property (retain) NSString* dId;
@property (retain) NSString* typeId;
@property int32_t pageCount;
@end

@implementation Document

- (BOOL) hasDId {
  return !!hasDId_;
}
- (void) setHasDId:(BOOL) value {
  hasDId_ = !!value;
}
@synthesize dId;
- (BOOL) hasTypeId {
  return !!hasTypeId_;
}
- (void) setHasTypeId:(BOOL) value {
  hasTypeId_ = !!value;
}
@synthesize typeId;
- (BOOL) hasPageCount {
  return !!hasPageCount_;
}
- (void) setHasPageCount:(BOOL) value {
  hasPageCount_ = !!value;
}
@synthesize pageCount;
- (void) dealloc {
  self.dId = nil;
  self.typeId = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.dId = @"";
    self.typeId = @"";
    self.pageCount = 0;
  }
  return self;
}
static Document* defaultDocumentInstance = nil;
+ (void) initialize {
  if (self == [Document class]) {
    defaultDocumentInstance = [[Document alloc] init];
  }
}
+ (Document*) defaultInstance {
  return defaultDocumentInstance;
}
- (Document*) defaultInstance {
  return defaultDocumentInstance;
}
- (BOOL) isInitialized {
  if (!self.hasDId) {
    return NO;
  }
  if (!self.hasTypeId) {
    return NO;
  }
  if (!self.hasPageCount) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDId) {
    [output writeString:1 value:self.dId];
  }
  if (self.hasTypeId) {
    [output writeString:2 value:self.typeId];
  }
  if (self.hasPageCount) {
    [output writeInt32:3 value:self.pageCount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasDId) {
    size += computeStringSize(1, self.dId);
  }
  if (self.hasTypeId) {
    size += computeStringSize(2, self.typeId);
  }
  if (self.hasPageCount) {
    size += computeInt32Size(3, self.pageCount);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Document*) parseFromData:(NSData*) data {
  return (Document*)[[[Document builder] mergeFromData:data] build];
}
+ (Document*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Document*)[[[Document builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Document*) parseFromInputStream:(NSInputStream*) input {
  return (Document*)[[[Document builder] mergeFromInputStream:input] build];
}
+ (Document*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Document*)[[[Document builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Document*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Document*)[[[Document builder] mergeFromCodedInputStream:input] build];
}
+ (Document*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Document*)[[[Document builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Document_Builder*) builder {
  return [[[Document_Builder alloc] init] autorelease];
}
+ (Document_Builder*) builderWithPrototype:(Document*) prototype {
  return [[Document builder] mergeFrom:prototype];
}
- (Document_Builder*) builder {
  return [Document builder];
}
@end

@interface Document_Builder()
@property (retain) Document* result;
@end

@implementation Document_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Document alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Document_Builder*) clear {
  self.result = [[[Document alloc] init] autorelease];
  return self;
}
- (Document_Builder*) clone {
  return [Document builderWithPrototype:result];
}
- (Document*) defaultInstance {
  return [Document defaultInstance];
}
- (Document*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Document*) buildPartial {
  Document* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Document_Builder*) mergeFrom:(Document*) other {
  if (other == [Document defaultInstance]) {
    return self;
  }
  if (other.hasDId) {
    [self setDId:other.dId];
  }
  if (other.hasTypeId) {
    [self setTypeId:other.typeId];
  }
  if (other.hasPageCount) {
    [self setPageCount:other.pageCount];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Document_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Document_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setDId:[input readString]];
        break;
      }
      case 18: {
        [self setTypeId:[input readString]];
        break;
      }
      case 24: {
        [self setPageCount:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasDId {
  return result.hasDId;
}
- (NSString*) dId {
  return result.dId;
}
- (Document_Builder*) setDId:(NSString*) value {
  result.hasDId = YES;
  result.dId = value;
  return self;
}
- (Document_Builder*) clearDId {
  result.hasDId = NO;
  result.dId = @"";
  return self;
}
- (BOOL) hasTypeId {
  return result.hasTypeId;
}
- (NSString*) typeId {
  return result.typeId;
}
- (Document_Builder*) setTypeId:(NSString*) value {
  result.hasTypeId = YES;
  result.typeId = value;
  return self;
}
- (Document_Builder*) clearTypeId {
  result.hasTypeId = NO;
  result.typeId = @"";
  return self;
}
- (BOOL) hasPageCount {
  return result.hasPageCount;
}
- (int32_t) pageCount {
  return result.pageCount;
}
- (Document_Builder*) setPageCount:(int32_t) value {
  result.hasPageCount = YES;
  result.pageCount = value;
  return self;
}
- (Document_Builder*) clearPageCount {
  result.hasPageCount = NO;
  result.pageCount = 0;
  return self;
}
@end

@interface DocumentList ()
@property (retain) NSMutableArray* mutableDocumentList;
@end

@implementation DocumentList

@synthesize mutableDocumentList;
- (void) dealloc {
  self.mutableDocumentList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static DocumentList* defaultDocumentListInstance = nil;
+ (void) initialize {
  if (self == [DocumentList class]) {
    defaultDocumentListInstance = [[DocumentList alloc] init];
  }
}
+ (DocumentList*) defaultInstance {
  return defaultDocumentListInstance;
}
- (DocumentList*) defaultInstance {
  return defaultDocumentListInstance;
}
- (NSArray*) documentList {
  return mutableDocumentList;
}
- (Document*) documentAtIndex:(int32_t) index {
  id value = [mutableDocumentList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (Document* element in self.documentList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (Document* element in self.documentList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (Document* element in self.documentList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (DocumentList*) parseFromData:(NSData*) data {
  return (DocumentList*)[[[DocumentList builder] mergeFromData:data] build];
}
+ (DocumentList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DocumentList*)[[[DocumentList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (DocumentList*) parseFromInputStream:(NSInputStream*) input {
  return (DocumentList*)[[[DocumentList builder] mergeFromInputStream:input] build];
}
+ (DocumentList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DocumentList*)[[[DocumentList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DocumentList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (DocumentList*)[[[DocumentList builder] mergeFromCodedInputStream:input] build];
}
+ (DocumentList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DocumentList*)[[[DocumentList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DocumentList_Builder*) builder {
  return [[[DocumentList_Builder alloc] init] autorelease];
}
+ (DocumentList_Builder*) builderWithPrototype:(DocumentList*) prototype {
  return [[DocumentList builder] mergeFrom:prototype];
}
- (DocumentList_Builder*) builder {
  return [DocumentList builder];
}
@end

@interface DocumentList_Builder()
@property (retain) DocumentList* result;
@end

@implementation DocumentList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[DocumentList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (DocumentList_Builder*) clear {
  self.result = [[[DocumentList alloc] init] autorelease];
  return self;
}
- (DocumentList_Builder*) clone {
  return [DocumentList builderWithPrototype:result];
}
- (DocumentList*) defaultInstance {
  return [DocumentList defaultInstance];
}
- (DocumentList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (DocumentList*) buildPartial {
  DocumentList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (DocumentList_Builder*) mergeFrom:(DocumentList*) other {
  if (other == [DocumentList defaultInstance]) {
    return self;
  }
  if (other.mutableDocumentList.count > 0) {
    if (result.mutableDocumentList == nil) {
      result.mutableDocumentList = [NSMutableArray array];
    }
    [result.mutableDocumentList addObjectsFromArray:other.mutableDocumentList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (DocumentList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (DocumentList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        Document_Builder* subBuilder = [Document builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDocument:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) documentList {
  if (result.mutableDocumentList == nil) { return [NSArray array]; }
  return result.mutableDocumentList;
}
- (Document*) documentAtIndex:(int32_t) index {
  return [result documentAtIndex:index];
}
- (DocumentList_Builder*) replaceDocumentAtIndex:(int32_t) index with:(Document*) value {
  [result.mutableDocumentList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (DocumentList_Builder*) addAllDocument:(NSArray*) values {
  if (result.mutableDocumentList == nil) {
    result.mutableDocumentList = [NSMutableArray array];
  }
  [result.mutableDocumentList addObjectsFromArray:values];
  return self;
}
- (DocumentList_Builder*) clearDocumentList {
  result.mutableDocumentList = nil;
  return self;
}
- (DocumentList_Builder*) addDocument:(Document*) value {
  if (result.mutableDocumentList == nil) {
    result.mutableDocumentList = [NSMutableArray array];
  }
  [result.mutableDocumentList addObject:value];
  return self;
}
@end

