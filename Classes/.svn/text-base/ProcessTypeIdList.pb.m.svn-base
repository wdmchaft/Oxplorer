// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "ProcessTypeIdList.pb.h"

@implementation ProcessTypeIdListRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ProcessTypeIdListRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface ProcessTypeIdList ()
@property (retain) NSMutableArray* mutableProcessTypeIdList;
@end

@implementation ProcessTypeIdList

@synthesize mutableProcessTypeIdList;
- (void) dealloc {
  self.mutableProcessTypeIdList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static ProcessTypeIdList* defaultProcessTypeIdListInstance = nil;
+ (void) initialize {
  if (self == [ProcessTypeIdList class]) {
    defaultProcessTypeIdListInstance = [[ProcessTypeIdList alloc] init];
  }
}
+ (ProcessTypeIdList*) defaultInstance {
  return defaultProcessTypeIdListInstance;
}
- (ProcessTypeIdList*) defaultInstance {
  return defaultProcessTypeIdListInstance;
}
- (NSArray*) processTypeIdList {
  return mutableProcessTypeIdList;
}
- (NSString*) processTypeIdAtIndex:(int32_t) index {
  id value = [mutableProcessTypeIdList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (NSString* element in self.mutableProcessTypeIdList) {
    [output writeString:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  {
    int32_t dataSize = 0;
    for (NSString* element in self.mutableProcessTypeIdList) {
      dataSize += computeStringSizeNoTag(element);
    }
    size += dataSize;
    size += 1 * self.mutableProcessTypeIdList.count;
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (ProcessTypeIdList*) parseFromData:(NSData*) data {
  return (ProcessTypeIdList*)[[[ProcessTypeIdList builder] mergeFromData:data] build];
}
+ (ProcessTypeIdList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProcessTypeIdList*)[[[ProcessTypeIdList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ProcessTypeIdList*) parseFromInputStream:(NSInputStream*) input {
  return (ProcessTypeIdList*)[[[ProcessTypeIdList builder] mergeFromInputStream:input] build];
}
+ (ProcessTypeIdList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProcessTypeIdList*)[[[ProcessTypeIdList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ProcessTypeIdList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ProcessTypeIdList*)[[[ProcessTypeIdList builder] mergeFromCodedInputStream:input] build];
}
+ (ProcessTypeIdList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProcessTypeIdList*)[[[ProcessTypeIdList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ProcessTypeIdList_Builder*) builder {
  return [[[ProcessTypeIdList_Builder alloc] init] autorelease];
}
+ (ProcessTypeIdList_Builder*) builderWithPrototype:(ProcessTypeIdList*) prototype {
  return [[ProcessTypeIdList builder] mergeFrom:prototype];
}
- (ProcessTypeIdList_Builder*) builder {
  return [ProcessTypeIdList builder];
}
@end

@interface ProcessTypeIdList_Builder()
@property (retain) ProcessTypeIdList* result;
@end

@implementation ProcessTypeIdList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[ProcessTypeIdList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ProcessTypeIdList_Builder*) clear {
  self.result = [[[ProcessTypeIdList alloc] init] autorelease];
  return self;
}
- (ProcessTypeIdList_Builder*) clone {
  return [ProcessTypeIdList builderWithPrototype:result];
}
- (ProcessTypeIdList*) defaultInstance {
  return [ProcessTypeIdList defaultInstance];
}
- (ProcessTypeIdList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ProcessTypeIdList*) buildPartial {
  ProcessTypeIdList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (ProcessTypeIdList_Builder*) mergeFrom:(ProcessTypeIdList*) other {
  if (other == [ProcessTypeIdList defaultInstance]) {
    return self;
  }
  if (other.mutableProcessTypeIdList.count > 0) {
    if (result.mutableProcessTypeIdList == nil) {
      result.mutableProcessTypeIdList = [NSMutableArray array];
    }
    [result.mutableProcessTypeIdList addObjectsFromArray:other.mutableProcessTypeIdList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ProcessTypeIdList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ProcessTypeIdList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self addProcessTypeId:[input readString]];
        break;
      }
    }
  }
}
- (NSArray*) processTypeIdList {
  if (result.mutableProcessTypeIdList == nil) {
    return [NSArray array];
  }
  return result.mutableProcessTypeIdList;
}
- (NSString*) processTypeIdAtIndex:(int32_t) index {
  return [result processTypeIdAtIndex:index];
}
- (ProcessTypeIdList_Builder*) replaceProcessTypeIdAtIndex:(int32_t) index with:(NSString*) value {
  [result.mutableProcessTypeIdList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (ProcessTypeIdList_Builder*) addProcessTypeId:(NSString*) value {
  if (result.mutableProcessTypeIdList == nil) {
    result.mutableProcessTypeIdList = [NSMutableArray array];
  }
  [result.mutableProcessTypeIdList addObject:value];
  return self;
}
- (ProcessTypeIdList_Builder*) addAllProcessTypeId:(NSArray*) values {
  if (result.mutableProcessTypeIdList == nil) {
    result.mutableProcessTypeIdList = [NSMutableArray array];
  }
  [result.mutableProcessTypeIdList addObjectsFromArray:values];
  return self;
}
- (ProcessTypeIdList_Builder*) clearProcessTypeIdList {
  result.mutableProcessTypeIdList = nil;
  return self;
}
@end

