// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "WbList.pb.h"

@implementation WbListRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [WbListRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface Wb ()
@property (retain) NSString* id;
@property (retain) NSString* type;
@end

@implementation Wb

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
- (void) dealloc {
  self.id = nil;
  self.type = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = @"";
    self.type = @"";
  }
  return self;
}
static Wb* defaultWbInstance = nil;
+ (void) initialize {
  if (self == [Wb class]) {
    defaultWbInstance = [[Wb alloc] init];
  }
}
+ (Wb*) defaultInstance {
  return defaultWbInstance;
}
- (Wb*) defaultInstance {
  return defaultWbInstance;
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasType) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeString:1 value:self.id];
  }
  if (self.hasType) {
    [output writeString:2 value:self.type];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasId) {
    size += computeStringSize(1, self.id);
  }
  if (self.hasType) {
    size += computeStringSize(2, self.type);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Wb*) parseFromData:(NSData*) data {
  return (Wb*)[[[Wb builder] mergeFromData:data] build];
}
+ (Wb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Wb*)[[[Wb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Wb*) parseFromInputStream:(NSInputStream*) input {
  return (Wb*)[[[Wb builder] mergeFromInputStream:input] build];
}
+ (Wb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Wb*)[[[Wb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Wb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Wb*)[[[Wb builder] mergeFromCodedInputStream:input] build];
}
+ (Wb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Wb*)[[[Wb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Wb_Builder*) builder {
  return [[[Wb_Builder alloc] init] autorelease];
}
+ (Wb_Builder*) builderWithPrototype:(Wb*) prototype {
  return [[Wb builder] mergeFrom:prototype];
}
- (Wb_Builder*) builder {
  return [Wb builder];
}
@end

@interface Wb_Builder()
@property (retain) Wb* result;
@end

@implementation Wb_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Wb alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Wb_Builder*) clear {
  self.result = [[[Wb alloc] init] autorelease];
  return self;
}
- (Wb_Builder*) clone {
  return [Wb builderWithPrototype:result];
}
- (Wb*) defaultInstance {
  return [Wb defaultInstance];
}
- (Wb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Wb*) buildPartial {
  Wb* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Wb_Builder*) mergeFrom:(Wb*) other {
  if (other == [Wb defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Wb_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Wb_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setId:[input readString]];
        break;
      }
      case 18: {
        [self setType:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (NSString*) id {
  return result.id;
}
- (Wb_Builder*) setId:(NSString*) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (Wb_Builder*) clearId {
  result.hasId = NO;
  result.id = @"";
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (NSString*) type {
  return result.type;
}
- (Wb_Builder*) setType:(NSString*) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (Wb_Builder*) clearType {
  result.hasType = NO;
  result.type = @"";
  return self;
}
@end

@interface WbList ()
@property (retain) NSMutableArray* mutableWbList;
@end

@implementation WbList

@synthesize mutableWbList;
- (void) dealloc {
  self.mutableWbList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static WbList* defaultWbListInstance = nil;
+ (void) initialize {
  if (self == [WbList class]) {
    defaultWbListInstance = [[WbList alloc] init];
  }
}
+ (WbList*) defaultInstance {
  return defaultWbListInstance;
}
- (WbList*) defaultInstance {
  return defaultWbListInstance;
}
- (NSArray*) wbList {
  return mutableWbList;
}
- (Wb*) wbAtIndex:(int32_t) index {
  id value = [mutableWbList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (Wb* element in self.wbList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (Wb* element in self.wbList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (Wb* element in self.wbList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (WbList*) parseFromData:(NSData*) data {
  return (WbList*)[[[WbList builder] mergeFromData:data] build];
}
+ (WbList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WbList*)[[[WbList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (WbList*) parseFromInputStream:(NSInputStream*) input {
  return (WbList*)[[[WbList builder] mergeFromInputStream:input] build];
}
+ (WbList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WbList*)[[[WbList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WbList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (WbList*)[[[WbList builder] mergeFromCodedInputStream:input] build];
}
+ (WbList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WbList*)[[[WbList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WbList_Builder*) builder {
  return [[[WbList_Builder alloc] init] autorelease];
}
+ (WbList_Builder*) builderWithPrototype:(WbList*) prototype {
  return [[WbList builder] mergeFrom:prototype];
}
- (WbList_Builder*) builder {
  return [WbList builder];
}
@end

@interface WbList_Builder()
@property (retain) WbList* result;
@end

@implementation WbList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[WbList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (WbList_Builder*) clear {
  self.result = [[[WbList alloc] init] autorelease];
  return self;
}
- (WbList_Builder*) clone {
  return [WbList builderWithPrototype:result];
}
- (WbList*) defaultInstance {
  return [WbList defaultInstance];
}
- (WbList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (WbList*) buildPartial {
  WbList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (WbList_Builder*) mergeFrom:(WbList*) other {
  if (other == [WbList defaultInstance]) {
    return self;
  }
  if (other.mutableWbList.count > 0) {
    if (result.mutableWbList == nil) {
      result.mutableWbList = [NSMutableArray array];
    }
    [result.mutableWbList addObjectsFromArray:other.mutableWbList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (WbList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (WbList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        Wb_Builder* subBuilder = [Wb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addWb:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) wbList {
  if (result.mutableWbList == nil) { return [NSArray array]; }
  return result.mutableWbList;
}
- (Wb*) wbAtIndex:(int32_t) index {
  return [result wbAtIndex:index];
}
- (WbList_Builder*) replaceWbAtIndex:(int32_t) index with:(Wb*) value {
  [result.mutableWbList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (WbList_Builder*) addAllWb:(NSArray*) values {
  if (result.mutableWbList == nil) {
    result.mutableWbList = [NSMutableArray array];
  }
  [result.mutableWbList addObjectsFromArray:values];
  return self;
}
- (WbList_Builder*) clearWbList {
  result.mutableWbList = nil;
  return self;
}
- (WbList_Builder*) addWb:(Wb*) value {
  if (result.mutableWbList == nil) {
    result.mutableWbList = [NSMutableArray array];
  }
  [result.mutableWbList addObject:value];
  return self;
}
@end

