// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "ProcessIdList.pb.h"

@implementation ProcessIdListRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ProcessIdListRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface ProcessIds ()
@property (retain) NSString* pid;
@property (retain) NSString* orderId;
@end

@implementation ProcessIds

- (BOOL) hasPid {
  return !!hasPid_;
}
- (void) setHasPid:(BOOL) value {
  hasPid_ = !!value;
}
@synthesize pid;
- (BOOL) hasOrderId {
  return !!hasOrderId_;
}
- (void) setHasOrderId:(BOOL) value {
  hasOrderId_ = !!value;
}
@synthesize orderId;
- (void) dealloc {
  self.pid = nil;
  self.orderId = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.pid = @"";
    self.orderId = @"";
  }
  return self;
}
static ProcessIds* defaultProcessIdsInstance = nil;
+ (void) initialize {
  if (self == [ProcessIds class]) {
    defaultProcessIdsInstance = [[ProcessIds alloc] init];
  }
}
+ (ProcessIds*) defaultInstance {
  return defaultProcessIdsInstance;
}
- (ProcessIds*) defaultInstance {
  return defaultProcessIdsInstance;
}
- (BOOL) isInitialized {
  if (!self.hasPid) {
    return NO;
  }
  if (!self.hasOrderId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPid) {
    [output writeString:1 value:self.pid];
  }
  if (self.hasOrderId) {
    [output writeString:2 value:self.orderId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasPid) {
    size += computeStringSize(1, self.pid);
  }
  if (self.hasOrderId) {
    size += computeStringSize(2, self.orderId);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (ProcessIds*) parseFromData:(NSData*) data {
  return (ProcessIds*)[[[ProcessIds builder] mergeFromData:data] build];
}
+ (ProcessIds*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProcessIds*)[[[ProcessIds builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ProcessIds*) parseFromInputStream:(NSInputStream*) input {
  return (ProcessIds*)[[[ProcessIds builder] mergeFromInputStream:input] build];
}
+ (ProcessIds*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProcessIds*)[[[ProcessIds builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ProcessIds*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ProcessIds*)[[[ProcessIds builder] mergeFromCodedInputStream:input] build];
}
+ (ProcessIds*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProcessIds*)[[[ProcessIds builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ProcessIds_Builder*) builder {
  return [[[ProcessIds_Builder alloc] init] autorelease];
}
+ (ProcessIds_Builder*) builderWithPrototype:(ProcessIds*) prototype {
  return [[ProcessIds builder] mergeFrom:prototype];
}
- (ProcessIds_Builder*) builder {
  return [ProcessIds builder];
}
@end

@interface ProcessIds_Builder()
@property (retain) ProcessIds* result;
@end

@implementation ProcessIds_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[ProcessIds alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ProcessIds_Builder*) clear {
  self.result = [[[ProcessIds alloc] init] autorelease];
  return self;
}
- (ProcessIds_Builder*) clone {
  return [ProcessIds builderWithPrototype:result];
}
- (ProcessIds*) defaultInstance {
  return [ProcessIds defaultInstance];
}
- (ProcessIds*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ProcessIds*) buildPartial {
  ProcessIds* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (ProcessIds_Builder*) mergeFrom:(ProcessIds*) other {
  if (other == [ProcessIds defaultInstance]) {
    return self;
  }
  if (other.hasPid) {
    [self setPid:other.pid];
  }
  if (other.hasOrderId) {
    [self setOrderId:other.orderId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ProcessIds_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ProcessIds_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setPid:[input readString]];
        break;
      }
      case 18: {
        [self setOrderId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasPid {
  return result.hasPid;
}
- (NSString*) pid {
  return result.pid;
}
- (ProcessIds_Builder*) setPid:(NSString*) value {
  result.hasPid = YES;
  result.pid = value;
  return self;
}
- (ProcessIds_Builder*) clearPid {
  result.hasPid = NO;
  result.pid = @"";
  return self;
}
- (BOOL) hasOrderId {
  return result.hasOrderId;
}
- (NSString*) orderId {
  return result.orderId;
}
- (ProcessIds_Builder*) setOrderId:(NSString*) value {
  result.hasOrderId = YES;
  result.orderId = value;
  return self;
}
- (ProcessIds_Builder*) clearOrderId {
  result.hasOrderId = NO;
  result.orderId = @"";
  return self;
}
@end

@interface BasketProcessIds ()
@property (retain) NSString* basketId;
@property (retain) NSMutableArray* mutableProcessIdsList;
@end

@implementation BasketProcessIds

- (BOOL) hasBasketId {
  return !!hasBasketId_;
}
- (void) setHasBasketId:(BOOL) value {
  hasBasketId_ = !!value;
}
@synthesize basketId;
@synthesize mutableProcessIdsList;
- (void) dealloc {
  self.basketId = nil;
  self.mutableProcessIdsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.basketId = @"";
  }
  return self;
}
static BasketProcessIds* defaultBasketProcessIdsInstance = nil;
+ (void) initialize {
  if (self == [BasketProcessIds class]) {
    defaultBasketProcessIdsInstance = [[BasketProcessIds alloc] init];
  }
}
+ (BasketProcessIds*) defaultInstance {
  return defaultBasketProcessIdsInstance;
}
- (BasketProcessIds*) defaultInstance {
  return defaultBasketProcessIdsInstance;
}
- (NSArray*) processIdsList {
  return mutableProcessIdsList;
}
- (ProcessIds*) processIdsAtIndex:(int32_t) index {
  id value = [mutableProcessIdsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasBasketId) {
    return NO;
  }
  for (ProcessIds* element in self.processIdsList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBasketId) {
    [output writeString:1 value:self.basketId];
  }
  for (ProcessIds* element in self.processIdsList) {
    [output writeMessage:2 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasBasketId) {
    size += computeStringSize(1, self.basketId);
  }
  for (ProcessIds* element in self.processIdsList) {
    size += computeMessageSize(2, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (BasketProcessIds*) parseFromData:(NSData*) data {
  return (BasketProcessIds*)[[[BasketProcessIds builder] mergeFromData:data] build];
}
+ (BasketProcessIds*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BasketProcessIds*)[[[BasketProcessIds builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BasketProcessIds*) parseFromInputStream:(NSInputStream*) input {
  return (BasketProcessIds*)[[[BasketProcessIds builder] mergeFromInputStream:input] build];
}
+ (BasketProcessIds*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BasketProcessIds*)[[[BasketProcessIds builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BasketProcessIds*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BasketProcessIds*)[[[BasketProcessIds builder] mergeFromCodedInputStream:input] build];
}
+ (BasketProcessIds*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BasketProcessIds*)[[[BasketProcessIds builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BasketProcessIds_Builder*) builder {
  return [[[BasketProcessIds_Builder alloc] init] autorelease];
}
+ (BasketProcessIds_Builder*) builderWithPrototype:(BasketProcessIds*) prototype {
  return [[BasketProcessIds builder] mergeFrom:prototype];
}
- (BasketProcessIds_Builder*) builder {
  return [BasketProcessIds builder];
}
@end

@interface BasketProcessIds_Builder()
@property (retain) BasketProcessIds* result;
@end

@implementation BasketProcessIds_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[BasketProcessIds alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (BasketProcessIds_Builder*) clear {
  self.result = [[[BasketProcessIds alloc] init] autorelease];
  return self;
}
- (BasketProcessIds_Builder*) clone {
  return [BasketProcessIds builderWithPrototype:result];
}
- (BasketProcessIds*) defaultInstance {
  return [BasketProcessIds defaultInstance];
}
- (BasketProcessIds*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BasketProcessIds*) buildPartial {
  BasketProcessIds* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (BasketProcessIds_Builder*) mergeFrom:(BasketProcessIds*) other {
  if (other == [BasketProcessIds defaultInstance]) {
    return self;
  }
  if (other.hasBasketId) {
    [self setBasketId:other.basketId];
  }
  if (other.mutableProcessIdsList.count > 0) {
    if (result.mutableProcessIdsList == nil) {
      result.mutableProcessIdsList = [NSMutableArray array];
    }
    [result.mutableProcessIdsList addObjectsFromArray:other.mutableProcessIdsList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BasketProcessIds_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BasketProcessIds_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setBasketId:[input readString]];
        break;
      }
      case 18: {
        ProcessIds_Builder* subBuilder = [ProcessIds builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addProcessIds:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasBasketId {
  return result.hasBasketId;
}
- (NSString*) basketId {
  return result.basketId;
}
- (BasketProcessIds_Builder*) setBasketId:(NSString*) value {
  result.hasBasketId = YES;
  result.basketId = value;
  return self;
}
- (BasketProcessIds_Builder*) clearBasketId {
  result.hasBasketId = NO;
  result.basketId = @"";
  return self;
}
- (NSArray*) processIdsList {
  if (result.mutableProcessIdsList == nil) { return [NSArray array]; }
  return result.mutableProcessIdsList;
}
- (ProcessIds*) processIdsAtIndex:(int32_t) index {
  return [result processIdsAtIndex:index];
}
- (BasketProcessIds_Builder*) replaceProcessIdsAtIndex:(int32_t) index with:(ProcessIds*) value {
  [result.mutableProcessIdsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (BasketProcessIds_Builder*) addAllProcessIds:(NSArray*) values {
  if (result.mutableProcessIdsList == nil) {
    result.mutableProcessIdsList = [NSMutableArray array];
  }
  [result.mutableProcessIdsList addObjectsFromArray:values];
  return self;
}
- (BasketProcessIds_Builder*) clearProcessIdsList {
  result.mutableProcessIdsList = nil;
  return self;
}
- (BasketProcessIds_Builder*) addProcessIds:(ProcessIds*) value {
  if (result.mutableProcessIdsList == nil) {
    result.mutableProcessIdsList = [NSMutableArray array];
  }
  [result.mutableProcessIdsList addObject:value];
  return self;
}
@end

@interface BasketProcessIdsList ()
@property (retain) NSMutableArray* mutableBasketProcessIdsList;
@end

@implementation BasketProcessIdsList

@synthesize mutableBasketProcessIdsList;
- (void) dealloc {
  self.mutableBasketProcessIdsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static BasketProcessIdsList* defaultBasketProcessIdsListInstance = nil;
+ (void) initialize {
  if (self == [BasketProcessIdsList class]) {
    defaultBasketProcessIdsListInstance = [[BasketProcessIdsList alloc] init];
  }
}
+ (BasketProcessIdsList*) defaultInstance {
  return defaultBasketProcessIdsListInstance;
}
- (BasketProcessIdsList*) defaultInstance {
  return defaultBasketProcessIdsListInstance;
}
- (NSArray*) basketProcessIdsList {
  return mutableBasketProcessIdsList;
}
- (BasketProcessIds*) basketProcessIdsAtIndex:(int32_t) index {
  id value = [mutableBasketProcessIdsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (BasketProcessIds* element in self.basketProcessIdsList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (BasketProcessIds* element in self.basketProcessIdsList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (BasketProcessIds* element in self.basketProcessIdsList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (BasketProcessIdsList*) parseFromData:(NSData*) data {
  return (BasketProcessIdsList*)[[[BasketProcessIdsList builder] mergeFromData:data] build];
}
+ (BasketProcessIdsList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BasketProcessIdsList*)[[[BasketProcessIdsList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BasketProcessIdsList*) parseFromInputStream:(NSInputStream*) input {
  return (BasketProcessIdsList*)[[[BasketProcessIdsList builder] mergeFromInputStream:input] build];
}
+ (BasketProcessIdsList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BasketProcessIdsList*)[[[BasketProcessIdsList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BasketProcessIdsList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BasketProcessIdsList*)[[[BasketProcessIdsList builder] mergeFromCodedInputStream:input] build];
}
+ (BasketProcessIdsList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BasketProcessIdsList*)[[[BasketProcessIdsList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BasketProcessIdsList_Builder*) builder {
  return [[[BasketProcessIdsList_Builder alloc] init] autorelease];
}
+ (BasketProcessIdsList_Builder*) builderWithPrototype:(BasketProcessIdsList*) prototype {
  return [[BasketProcessIdsList builder] mergeFrom:prototype];
}
- (BasketProcessIdsList_Builder*) builder {
  return [BasketProcessIdsList builder];
}
@end

@interface BasketProcessIdsList_Builder()
@property (retain) BasketProcessIdsList* result;
@end

@implementation BasketProcessIdsList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[BasketProcessIdsList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (BasketProcessIdsList_Builder*) clear {
  self.result = [[[BasketProcessIdsList alloc] init] autorelease];
  return self;
}
- (BasketProcessIdsList_Builder*) clone {
  return [BasketProcessIdsList builderWithPrototype:result];
}
- (BasketProcessIdsList*) defaultInstance {
  return [BasketProcessIdsList defaultInstance];
}
- (BasketProcessIdsList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BasketProcessIdsList*) buildPartial {
  BasketProcessIdsList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (BasketProcessIdsList_Builder*) mergeFrom:(BasketProcessIdsList*) other {
  if (other == [BasketProcessIdsList defaultInstance]) {
    return self;
  }
  if (other.mutableBasketProcessIdsList.count > 0) {
    if (result.mutableBasketProcessIdsList == nil) {
      result.mutableBasketProcessIdsList = [NSMutableArray array];
    }
    [result.mutableBasketProcessIdsList addObjectsFromArray:other.mutableBasketProcessIdsList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BasketProcessIdsList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BasketProcessIdsList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        BasketProcessIds_Builder* subBuilder = [BasketProcessIds builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBasketProcessIds:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) basketProcessIdsList {
  if (result.mutableBasketProcessIdsList == nil) { return [NSArray array]; }
  return result.mutableBasketProcessIdsList;
}
- (BasketProcessIds*) basketProcessIdsAtIndex:(int32_t) index {
  return [result basketProcessIdsAtIndex:index];
}
- (BasketProcessIdsList_Builder*) replaceBasketProcessIdsAtIndex:(int32_t) index with:(BasketProcessIds*) value {
  [result.mutableBasketProcessIdsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (BasketProcessIdsList_Builder*) addAllBasketProcessIds:(NSArray*) values {
  if (result.mutableBasketProcessIdsList == nil) {
    result.mutableBasketProcessIdsList = [NSMutableArray array];
  }
  [result.mutableBasketProcessIdsList addObjectsFromArray:values];
  return self;
}
- (BasketProcessIdsList_Builder*) clearBasketProcessIdsList {
  result.mutableBasketProcessIdsList = nil;
  return self;
}
- (BasketProcessIdsList_Builder*) addBasketProcessIds:(BasketProcessIds*) value {
  if (result.mutableBasketProcessIdsList == nil) {
    result.mutableBasketProcessIdsList = [NSMutableArray array];
  }
  [result.mutableBasketProcessIdsList addObject:value];
  return self;
}
@end

@interface BasketProcessId ()
@property (retain) NSString* basketId;
@property (retain) NSMutableArray* mutablePidList;
@end

@implementation BasketProcessId

- (BOOL) hasBasketId {
  return !!hasBasketId_;
}
- (void) setHasBasketId:(BOOL) value {
  hasBasketId_ = !!value;
}
@synthesize basketId;
@synthesize mutablePidList;
- (void) dealloc {
  self.basketId = nil;
  self.mutablePidList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.basketId = @"";
  }
  return self;
}
static BasketProcessId* defaultBasketProcessIdInstance = nil;
+ (void) initialize {
  if (self == [BasketProcessId class]) {
    defaultBasketProcessIdInstance = [[BasketProcessId alloc] init];
  }
}
+ (BasketProcessId*) defaultInstance {
  return defaultBasketProcessIdInstance;
}
- (BasketProcessId*) defaultInstance {
  return defaultBasketProcessIdInstance;
}
- (NSArray*) pidList {
  return mutablePidList;
}
- (NSString*) pidAtIndex:(int32_t) index {
  id value = [mutablePidList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasBasketId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBasketId) {
    [output writeString:1 value:self.basketId];
  }
  for (NSString* element in self.mutablePidList) {
    [output writeString:2 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasBasketId) {
    size += computeStringSize(1, self.basketId);
  }
  {
    int32_t dataSize = 0;
    for (NSString* element in self.mutablePidList) {
      dataSize += computeStringSizeNoTag(element);
    }
    size += dataSize;
    size += 1 * self.mutablePidList.count;
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (BasketProcessId*) parseFromData:(NSData*) data {
  return (BasketProcessId*)[[[BasketProcessId builder] mergeFromData:data] build];
}
+ (BasketProcessId*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BasketProcessId*)[[[BasketProcessId builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BasketProcessId*) parseFromInputStream:(NSInputStream*) input {
  return (BasketProcessId*)[[[BasketProcessId builder] mergeFromInputStream:input] build];
}
+ (BasketProcessId*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BasketProcessId*)[[[BasketProcessId builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BasketProcessId*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BasketProcessId*)[[[BasketProcessId builder] mergeFromCodedInputStream:input] build];
}
+ (BasketProcessId*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BasketProcessId*)[[[BasketProcessId builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BasketProcessId_Builder*) builder {
  return [[[BasketProcessId_Builder alloc] init] autorelease];
}
+ (BasketProcessId_Builder*) builderWithPrototype:(BasketProcessId*) prototype {
  return [[BasketProcessId builder] mergeFrom:prototype];
}
- (BasketProcessId_Builder*) builder {
  return [BasketProcessId builder];
}
@end

@interface BasketProcessId_Builder()
@property (retain) BasketProcessId* result;
@end

@implementation BasketProcessId_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[BasketProcessId alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (BasketProcessId_Builder*) clear {
  self.result = [[[BasketProcessId alloc] init] autorelease];
  return self;
}
- (BasketProcessId_Builder*) clone {
  return [BasketProcessId builderWithPrototype:result];
}
- (BasketProcessId*) defaultInstance {
  return [BasketProcessId defaultInstance];
}
- (BasketProcessId*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BasketProcessId*) buildPartial {
  BasketProcessId* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (BasketProcessId_Builder*) mergeFrom:(BasketProcessId*) other {
  if (other == [BasketProcessId defaultInstance]) {
    return self;
  }
  if (other.hasBasketId) {
    [self setBasketId:other.basketId];
  }
  if (other.mutablePidList.count > 0) {
    if (result.mutablePidList == nil) {
      result.mutablePidList = [NSMutableArray array];
    }
    [result.mutablePidList addObjectsFromArray:other.mutablePidList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BasketProcessId_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BasketProcessId_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setBasketId:[input readString]];
        break;
      }
      case 18: {
        [self addPid:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasBasketId {
  return result.hasBasketId;
}
- (NSString*) basketId {
  return result.basketId;
}
- (BasketProcessId_Builder*) setBasketId:(NSString*) value {
  result.hasBasketId = YES;
  result.basketId = value;
  return self;
}
- (BasketProcessId_Builder*) clearBasketId {
  result.hasBasketId = NO;
  result.basketId = @"";
  return self;
}
- (NSArray*) pidList {
  if (result.mutablePidList == nil) {
    return [NSArray array];
  }
  return result.mutablePidList;
}
- (NSString*) pidAtIndex:(int32_t) index {
  return [result pidAtIndex:index];
}
- (BasketProcessId_Builder*) replacePidAtIndex:(int32_t) index with:(NSString*) value {
  [result.mutablePidList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (BasketProcessId_Builder*) addPid:(NSString*) value {
  if (result.mutablePidList == nil) {
    result.mutablePidList = [NSMutableArray array];
  }
  [result.mutablePidList addObject:value];
  return self;
}
- (BasketProcessId_Builder*) addAllPid:(NSArray*) values {
  if (result.mutablePidList == nil) {
    result.mutablePidList = [NSMutableArray array];
  }
  [result.mutablePidList addObjectsFromArray:values];
  return self;
}
- (BasketProcessId_Builder*) clearPidList {
  result.mutablePidList = nil;
  return self;
}
@end

@interface BasketProcessIdList ()
@property (retain) NSMutableArray* mutableBasketProcessIdList;
@end

@implementation BasketProcessIdList

@synthesize mutableBasketProcessIdList;
- (void) dealloc {
  self.mutableBasketProcessIdList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static BasketProcessIdList* defaultBasketProcessIdListInstance = nil;
+ (void) initialize {
  if (self == [BasketProcessIdList class]) {
    defaultBasketProcessIdListInstance = [[BasketProcessIdList alloc] init];
  }
}
+ (BasketProcessIdList*) defaultInstance {
  return defaultBasketProcessIdListInstance;
}
- (BasketProcessIdList*) defaultInstance {
  return defaultBasketProcessIdListInstance;
}
- (NSArray*) basketProcessIdList {
  return mutableBasketProcessIdList;
}
- (BasketProcessId*) basketProcessIdAtIndex:(int32_t) index {
  id value = [mutableBasketProcessIdList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (BasketProcessId* element in self.basketProcessIdList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (BasketProcessId* element in self.basketProcessIdList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (BasketProcessId* element in self.basketProcessIdList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (BasketProcessIdList*) parseFromData:(NSData*) data {
  return (BasketProcessIdList*)[[[BasketProcessIdList builder] mergeFromData:data] build];
}
+ (BasketProcessIdList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BasketProcessIdList*)[[[BasketProcessIdList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BasketProcessIdList*) parseFromInputStream:(NSInputStream*) input {
  return (BasketProcessIdList*)[[[BasketProcessIdList builder] mergeFromInputStream:input] build];
}
+ (BasketProcessIdList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BasketProcessIdList*)[[[BasketProcessIdList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BasketProcessIdList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BasketProcessIdList*)[[[BasketProcessIdList builder] mergeFromCodedInputStream:input] build];
}
+ (BasketProcessIdList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BasketProcessIdList*)[[[BasketProcessIdList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BasketProcessIdList_Builder*) builder {
  return [[[BasketProcessIdList_Builder alloc] init] autorelease];
}
+ (BasketProcessIdList_Builder*) builderWithPrototype:(BasketProcessIdList*) prototype {
  return [[BasketProcessIdList builder] mergeFrom:prototype];
}
- (BasketProcessIdList_Builder*) builder {
  return [BasketProcessIdList builder];
}
@end

@interface BasketProcessIdList_Builder()
@property (retain) BasketProcessIdList* result;
@end

@implementation BasketProcessIdList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[BasketProcessIdList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (BasketProcessIdList_Builder*) clear {
  self.result = [[[BasketProcessIdList alloc] init] autorelease];
  return self;
}
- (BasketProcessIdList_Builder*) clone {
  return [BasketProcessIdList builderWithPrototype:result];
}
- (BasketProcessIdList*) defaultInstance {
  return [BasketProcessIdList defaultInstance];
}
- (BasketProcessIdList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BasketProcessIdList*) buildPartial {
  BasketProcessIdList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (BasketProcessIdList_Builder*) mergeFrom:(BasketProcessIdList*) other {
  if (other == [BasketProcessIdList defaultInstance]) {
    return self;
  }
  if (other.mutableBasketProcessIdList.count > 0) {
    if (result.mutableBasketProcessIdList == nil) {
      result.mutableBasketProcessIdList = [NSMutableArray array];
    }
    [result.mutableBasketProcessIdList addObjectsFromArray:other.mutableBasketProcessIdList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BasketProcessIdList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BasketProcessIdList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        BasketProcessId_Builder* subBuilder = [BasketProcessId builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBasketProcessId:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) basketProcessIdList {
  if (result.mutableBasketProcessIdList == nil) { return [NSArray array]; }
  return result.mutableBasketProcessIdList;
}
- (BasketProcessId*) basketProcessIdAtIndex:(int32_t) index {
  return [result basketProcessIdAtIndex:index];
}
- (BasketProcessIdList_Builder*) replaceBasketProcessIdAtIndex:(int32_t) index with:(BasketProcessId*) value {
  [result.mutableBasketProcessIdList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (BasketProcessIdList_Builder*) addAllBasketProcessId:(NSArray*) values {
  if (result.mutableBasketProcessIdList == nil) {
    result.mutableBasketProcessIdList = [NSMutableArray array];
  }
  [result.mutableBasketProcessIdList addObjectsFromArray:values];
  return self;
}
- (BasketProcessIdList_Builder*) clearBasketProcessIdList {
  result.mutableBasketProcessIdList = nil;
  return self;
}
- (BasketProcessIdList_Builder*) addBasketProcessId:(BasketProcessId*) value {
  if (result.mutableBasketProcessIdList == nil) {
    result.mutableBasketProcessIdList = [NSMutableArray array];
  }
  [result.mutableBasketProcessIdList addObject:value];
  return self;
}
@end

@interface ProcessIdList ()
@property (retain) NSMutableArray* mutablePidList;
@end

@implementation ProcessIdList

@synthesize mutablePidList;
- (void) dealloc {
  self.mutablePidList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static ProcessIdList* defaultProcessIdListInstance = nil;
+ (void) initialize {
  if (self == [ProcessIdList class]) {
    defaultProcessIdListInstance = [[ProcessIdList alloc] init];
  }
}
+ (ProcessIdList*) defaultInstance {
  return defaultProcessIdListInstance;
}
- (ProcessIdList*) defaultInstance {
  return defaultProcessIdListInstance;
}
- (NSArray*) pidList {
  return mutablePidList;
}
- (NSString*) pidAtIndex:(int32_t) index {
  id value = [mutablePidList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (NSString* element in self.mutablePidList) {
    [output writeString:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  {
    int32_t dataSize = 0;
    for (NSString* element in self.mutablePidList) {
      dataSize += computeStringSizeNoTag(element);
    }
    size += dataSize;
    size += 1 * self.mutablePidList.count;
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (ProcessIdList*) parseFromData:(NSData*) data {
  return (ProcessIdList*)[[[ProcessIdList builder] mergeFromData:data] build];
}
+ (ProcessIdList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProcessIdList*)[[[ProcessIdList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ProcessIdList*) parseFromInputStream:(NSInputStream*) input {
  return (ProcessIdList*)[[[ProcessIdList builder] mergeFromInputStream:input] build];
}
+ (ProcessIdList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProcessIdList*)[[[ProcessIdList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ProcessIdList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ProcessIdList*)[[[ProcessIdList builder] mergeFromCodedInputStream:input] build];
}
+ (ProcessIdList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProcessIdList*)[[[ProcessIdList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ProcessIdList_Builder*) builder {
  return [[[ProcessIdList_Builder alloc] init] autorelease];
}
+ (ProcessIdList_Builder*) builderWithPrototype:(ProcessIdList*) prototype {
  return [[ProcessIdList builder] mergeFrom:prototype];
}
- (ProcessIdList_Builder*) builder {
  return [ProcessIdList builder];
}
@end

@interface ProcessIdList_Builder()
@property (retain) ProcessIdList* result;
@end

@implementation ProcessIdList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[ProcessIdList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ProcessIdList_Builder*) clear {
  self.result = [[[ProcessIdList alloc] init] autorelease];
  return self;
}
- (ProcessIdList_Builder*) clone {
  return [ProcessIdList builderWithPrototype:result];
}
- (ProcessIdList*) defaultInstance {
  return [ProcessIdList defaultInstance];
}
- (ProcessIdList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ProcessIdList*) buildPartial {
  ProcessIdList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (ProcessIdList_Builder*) mergeFrom:(ProcessIdList*) other {
  if (other == [ProcessIdList defaultInstance]) {
    return self;
  }
  if (other.mutablePidList.count > 0) {
    if (result.mutablePidList == nil) {
      result.mutablePidList = [NSMutableArray array];
    }
    [result.mutablePidList addObjectsFromArray:other.mutablePidList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ProcessIdList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ProcessIdList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self addPid:[input readString]];
        break;
      }
    }
  }
}
- (NSArray*) pidList {
  if (result.mutablePidList == nil) {
    return [NSArray array];
  }
  return result.mutablePidList;
}
- (NSString*) pidAtIndex:(int32_t) index {
  return [result pidAtIndex:index];
}
- (ProcessIdList_Builder*) replacePidAtIndex:(int32_t) index with:(NSString*) value {
  [result.mutablePidList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (ProcessIdList_Builder*) addPid:(NSString*) value {
  if (result.mutablePidList == nil) {
    result.mutablePidList = [NSMutableArray array];
  }
  [result.mutablePidList addObject:value];
  return self;
}
- (ProcessIdList_Builder*) addAllPid:(NSArray*) values {
  if (result.mutablePidList == nil) {
    result.mutablePidList = [NSMutableArray array];
  }
  [result.mutablePidList addObjectsFromArray:values];
  return self;
}
- (ProcessIdList_Builder*) clearPidList {
  result.mutablePidList = nil;
  return self;
}
@end

